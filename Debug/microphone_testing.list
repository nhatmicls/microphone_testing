
microphone_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000829c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008424  08008424  00018424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008440  08008440  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008448  08008448  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008448  08008448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  20000090  080084e0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  080084e0  0002082c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178c2  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036a1  00000000  00000000  00037982  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  0003b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  0003bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d07  00000000  00000000  0003cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff00  00000000  00000000  00060ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd98e  00000000  00000000  000709d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ac  00000000  00000000  0013e3e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800840c 	.word	0x0800840c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800840c 	.word	0x0800840c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <getdata>:

static uint16_t UARTlengthcount=0;
static uint8_t copystate=STOP;

void getdata()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	switch (copystate) {
 80004dc:	4b22      	ldr	r3, [pc, #136]	; (8000568 <getdata+0x90>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <getdata+0x12>
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d014      	beq.n	8000512 <getdata+0x3a>
			}
			else
				UARTbuffer[UARTlengthcount++]=UARTgetchar[0];
			break;
		default:
			break;
 80004e8:	e03c      	b.n	8000564 <getdata+0x8c>
			if(UARTgetchar[0]=='[')
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <getdata+0x94>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b5b      	cmp	r3, #91	; 0x5b
 80004f0:	d137      	bne.n	8000562 <getdata+0x8a>
				copystate=HANDLE;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <getdata+0x90>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
				UARTlengthcount=0;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <getdata+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	801a      	strh	r2, [r3, #0]
				memset(UARTbuffer,0,strlen(UARTbuffer));
 80004fe:	481d      	ldr	r0, [pc, #116]	; (8000574 <getdata+0x9c>)
 8000500:	f7ff fe62 	bl	80001c8 <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	481a      	ldr	r0, [pc, #104]	; (8000574 <getdata+0x9c>)
 800050c:	f007 febc 	bl	8008288 <memset>
			break;
 8000510:	e027      	b.n	8000562 <getdata+0x8a>
			if(UARTgetchar[0]==']')
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <getdata+0x94>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b5d      	cmp	r3, #93	; 0x5d
 8000518:	d106      	bne.n	8000528 <getdata+0x50>
				copystate=STOP;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <getdata+0x90>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
				newblockdata=1;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <getdata+0xa0>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
			break;
 8000526:	e01d      	b.n	8000564 <getdata+0x8c>
			else if(UARTgetchar[0]=='[')
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <getdata+0x94>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b5b      	cmp	r3, #91	; 0x5b
 800052e:	d10c      	bne.n	800054a <getdata+0x72>
				UARTlengthcount=0;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <getdata+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
				memset(UARTbuffer,0,strlen(UARTbuffer));
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <getdata+0x9c>)
 8000538:	f7ff fe46 	bl	80001c8 <strlen>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <getdata+0x9c>)
 8000544:	f007 fea0 	bl	8008288 <memset>
			break;
 8000548:	e00c      	b.n	8000564 <getdata+0x8c>
				UARTbuffer[UARTlengthcount++]=UARTgetchar[0];
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <getdata+0x98>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	b291      	uxth	r1, r2
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <getdata+0x98>)
 8000554:	8011      	strh	r1, [r2, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <getdata+0x94>)
 800055a:	7819      	ldrb	r1, [r3, #0]
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <getdata+0x9c>)
 800055e:	5499      	strb	r1, [r3, r2]
			break;
 8000560:	e000      	b.n	8000564 <getdata+0x8c>
			break;
 8000562:	bf00      	nop
	}
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200000ae 	.word	0x200000ae
 800056c:	20000184 	.word	0x20000184
 8000570:	200000ac 	.word	0x200000ac
 8000574:	2000012c 	.word	0x2000012c
 8000578:	200000b1 	.word	0x200000b1

0800057c <HAL_ADC_ConvCpltCallback>:
{
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)adcinputvalue);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==hadc1.Instance)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x2c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	429a      	cmp	r2, r3
 800058e:	d106      	bne.n	800059e <HAL_ADC_ConvCpltCallback+0x22>
		adcinputvalue=HAL_ADC_GetValue(hadc);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 ff2e 	bl	80013f2 <HAL_ADC_GetValue>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_ADC_ConvCpltCallback+0x30>)
 800059c:	801a      	strh	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000cc 	.word	0x200000cc
 80005ac:	200000c8 	.word	0x200000c8

080005b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_UART_RxCpltCallback+0x30>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d10a      	bne.n	80005d8 <HAL_UART_RxCpltCallback+0x28>
	{
		if(newblockdata==0)
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HAL_UART_RxCpltCallback+0x34>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d101      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x1e>
			getdata();
 80005ca:	f7ff ff85 	bl	80004d8 <getdata>
		HAL_UART_Receive_IT(&huart2, UARTgetchar, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	4905      	ldr	r1, [pc, #20]	; (80005e8 <HAL_UART_RxCpltCallback+0x38>)
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <HAL_UART_RxCpltCallback+0x3c>)
 80005d4:	f003 fec9 	bl	800436a <HAL_UART_Receive_IT>
	}
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40004400 	.word	0x40004400
 80005e4:	200000b1 	.word	0x200000b1
 80005e8:	20000184 	.word	0x20000184
 80005ec:	20000140 	.word	0x20000140

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fc14 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f844 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f952 	bl	80008a4 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000600:	f007 fb00 	bl	8007c04 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000604:	f000 f8a8 	bl	8000758 <MX_ADC1_Init>
  MX_DAC_Init();
 8000608:	f000 f8f8 	bl	80007fc <MX_DAC_Init>
  MX_USART2_UART_Init();
 800060c:	f000 f920 	bl	8000850 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <main+0x74>)
 8000612:	f000 fcdd 	bl	8000fd0 <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	4813      	ldr	r0, [pc, #76]	; (8000668 <main+0x78>)
 800061a:	f001 fa66 	bl	8001aea <HAL_DAC_Start>
  HAL_UART_Receive_IT(&huart2, UARTgetchar, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	4912      	ldr	r1, [pc, #72]	; (800066c <main+0x7c>)
 8000622:	4813      	ldr	r0, [pc, #76]	; (8000670 <main+0x80>)
 8000624:	f003 fea1 	bl	800436a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	data=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000628:	2101      	movs	r1, #1
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <main+0x84>)
 800062c:	f001 fccc 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <main+0x88>)
 8000636:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000638:	f007 fb0a 	bl	8007c50 <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */
    if (newblockdata==1)
    {

	}
    switch (mode) {
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <main+0x8c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d004      	beq.n	800064e <main+0x5e>
 8000644:	2b02      	cmp	r3, #2
 8000646:	d004      	beq.n	8000652 <main+0x62>
 8000648:	2b00      	cmp	r3, #0
 800064a:	d004      	beq.n	8000656 <main+0x66>
		case SEND:
			break;
		case RECIEVE:
			break;
		default:
			break;
 800064c:	e004      	b.n	8000658 <main+0x68>
			break;
 800064e:	bf00      	nop
 8000650:	e002      	b.n	8000658 <main+0x68>
			break;
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <main+0x68>
			break;
 8000656:	bf00      	nop
	}
    lastdata=data;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <main+0x88>)
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <main+0x90>)
 800065e:	701a      	strb	r2, [r3, #0]
	data=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000660:	e7e2      	b.n	8000628 <main+0x38>
 8000662:	bf00      	nop
 8000664:	200000cc 	.word	0x200000cc
 8000668:	20000114 	.word	0x20000114
 800066c:	20000184 	.word	0x20000184
 8000670:	20000140 	.word	0x20000140
 8000674:	40020000 	.word	0x40020000
 8000678:	20000128 	.word	0x20000128
 800067c:	200000af 	.word	0x200000af
 8000680:	200000b0 	.word	0x200000b0

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fdf8 	bl	8008288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <SystemClock_Config+0xcc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <SystemClock_Config+0xd0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000702:	2307      	movs	r3, #7
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f97e 	bl	8003a0c <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000716:	f000 f9b1 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fbd7 	bl	8003eec <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000744:	f000 f99a 	bl	8000a7c <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	; 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_ADC1_Init+0x98>)
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <MX_ADC1_Init+0x9c>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_ADC1_Init+0x98>)
 8000772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000776:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_ADC1_Init+0x98>)
 8000786:	2201      	movs	r2, #1
 8000788:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_ADC1_Init+0x98>)
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <MX_ADC1_Init+0xa0>)
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007ba:	f000 fbc5 	bl	8000f48 <HAL_ADC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c4:	f000 f95a 	bl	8000a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007c8:	230b      	movs	r3, #11
 80007ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007da:	f000 fe2b 	bl	8001434 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e4:	f000 f94a 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000cc 	.word	0x200000cc
 80007f4:	40012000 	.word	0x40012000
 80007f8:	0f000001 	.word	0x0f000001

080007fc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_DAC_Init+0x4c>)
 800080c:	4a0f      	ldr	r2, [pc, #60]	; (800084c <MX_DAC_Init+0x50>)
 800080e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_DAC_Init+0x4c>)
 8000812:	f001 f948 	bl	8001aa6 <HAL_DAC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800081c:	f000 f92e 	bl	8000a7c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_DAC_Init+0x4c>)
 8000830:	f001 f9c1 	bl	8001bb6 <HAL_DAC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800083a:	f000 f91f 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000114 	.word	0x20000114
 800084c:	40007400 	.word	0x40007400

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART2_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000888:	f003 fd22 	bl	80042d0 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f8f3 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000140 	.word	0x20000140
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	4b68      	ldr	r3, [pc, #416]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a67      	ldr	r2, [pc, #412]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b65      	ldr	r3, [pc, #404]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0310 	and.w	r3, r3, #16
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	4b61      	ldr	r3, [pc, #388]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a60      	ldr	r2, [pc, #384]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b5a      	ldr	r3, [pc, #360]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a59      	ldr	r2, [pc, #356]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b57      	ldr	r3, [pc, #348]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b53      	ldr	r3, [pc, #332]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a52      	ldr	r2, [pc, #328]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b50      	ldr	r3, [pc, #320]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b4c      	ldr	r3, [pc, #304]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a4b      	ldr	r2, [pc, #300]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b49      	ldr	r3, [pc, #292]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a44      	ldr	r2, [pc, #272]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <MX_GPIO_Init+0x1bc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2108      	movs	r1, #8
 8000966:	483f      	ldr	r0, [pc, #252]	; (8000a64 <MX_GPIO_Init+0x1c0>)
 8000968:	f001 fb46 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	483d      	ldr	r0, [pc, #244]	; (8000a68 <MX_GPIO_Init+0x1c4>)
 8000972:	f001 fb41 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000976:	2200      	movs	r2, #0
 8000978:	f24f 0110 	movw	r1, #61456	; 0xf010
 800097c:	483b      	ldr	r0, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x1c8>)
 800097e:	f001 fb3b 	bl	8001ff8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000982:	2308      	movs	r3, #8
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4832      	ldr	r0, [pc, #200]	; (8000a64 <MX_GPIO_Init+0x1c0>)
 800099a:	f001 f97b 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800099e:	2301      	movs	r3, #1
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	482c      	ldr	r0, [pc, #176]	; (8000a68 <MX_GPIO_Init+0x1c4>)
 80009b6:	f001 f96d 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ba:	2308      	movs	r3, #8
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ca:	2305      	movs	r3, #5
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4824      	ldr	r0, [pc, #144]	; (8000a68 <MX_GPIO_Init+0x1c4>)
 80009d6:	f001 f95d 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009da:	2301      	movs	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MX_GPIO_Init+0x1cc>)
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4821      	ldr	r0, [pc, #132]	; (8000a74 <MX_GPIO_Init+0x1d0>)
 80009ee:	f001 f951 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009f2:	2304      	movs	r3, #4
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	481c      	ldr	r0, [pc, #112]	; (8000a78 <MX_GPIO_Init+0x1d4>)
 8000a06:	f001 f945 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a0a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a0e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0x1c8>)
 8000a24:	f001 f936 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a28:	2320      	movs	r3, #32
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x1c8>)
 8000a3c:	f001 f92a 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_GPIO_Init+0x1cc>)
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0x1c0>)
 8000a54:	f001 f91e 	bl	8001c94 <HAL_GPIO_Init>

}
 8000a58:	bf00      	nop
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	10120000 	.word	0x10120000
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020400 	.word	0x40020400

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aca:	2007      	movs	r0, #7
 8000acc:	f000 ffaa 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <HAL_ADC_MspInit+0x8c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12f      	bne.n	8000b5e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_ADC_MspInit+0x90>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_ADC_MspInit+0x90>)
 8000b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_ADC_MspInit+0x90>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_ADC_MspInit+0x90>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <HAL_ADC_MspInit+0x90>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_ADC_MspInit+0x90>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b36:	2302      	movs	r3, #2
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <HAL_ADC_MspInit+0x94>)
 8000b4a:	f001 f8a3 	bl	8001c94 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2012      	movs	r0, #18
 8000b54:	f000 ff71 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b58:	2012      	movs	r0, #18
 8000b5a:	f000 ff8a 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40012000 	.word	0x40012000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020800 	.word	0x40020800

08000b74 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_DAC_MspInit+0x7c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d127      	bne.n	8000be6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_DAC_MspInit+0x80>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <HAL_DAC_MspInit+0x80>)
 8000ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_DAC_MspInit+0x80>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_DAC_MspInit+0x80>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_DAC_MspInit+0x80>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_DAC_MspInit+0x80>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_DAC_MspInit+0x84>)
 8000be2:	f001 f857 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40007400 	.word	0x40007400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_UART_MspInit+0x94>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d133      	bne.n	8000c86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c56:	230c      	movs	r3, #12
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c66:	2307      	movs	r3, #7
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <HAL_UART_MspInit+0x9c>)
 8000c72:	f001 f80f 	bl	8001c94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2026      	movs	r0, #38	; 0x26
 8000c7c:	f000 fedd 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c80:	2026      	movs	r0, #38	; 0x26
 8000c82:	f000 fef6 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 f8e8 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <ADC_IRQHandler+0x10>)
 8000cfe:	f000 fa37 	bl	8001170 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000cc 	.word	0x200000cc

08000d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <USART2_IRQHandler+0x10>)
 8000d12:	f003 fb7f 	bl	8004414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000140 	.word	0x20000140

08000d20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <OTG_FS_IRQHandler+0x10>)
 8000d26:	f001 fc0f 	bl	8002548 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000564 	.word	0x20000564

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f007 fa56 	bl	8008214 <__errno>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20020000 	.word	0x20020000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200000b4 	.word	0x200000b4
 8000d9c:	20000830 	.word	0x20000830

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <SystemInit+0x28>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <SystemInit+0x28>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SystemInit+0x28>)
 8000db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dba:	609a      	str	r2, [r3, #8]
#endif
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dd2:	e003      	b.n	8000ddc <LoopCopyDataInit>

08000dd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dda:	3104      	adds	r1, #4

08000ddc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000de0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000de2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000de4:	d3f6      	bcc.n	8000dd4 <CopyDataInit>
  ldr  r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000de8:	e002      	b.n	8000df0 <LoopFillZerobss>

08000dea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dec:	f842 3b04 	str.w	r3, [r2], #4

08000df0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000df2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000df4:	d3f9      	bcc.n	8000dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000df6:	f7ff ffd3 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f007 fa11 	bl	8008220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fbf7 	bl	80005f0 <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e08:	08008450 	.word	0x08008450
  ldr  r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e10:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000e14:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000e18:	2000082c 	.word	0x2000082c

08000e1c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <CAN1_RX0_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 fdeb 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fe1a 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fe03 	bl	8001a8e <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 fdcb 	bl	8001a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000188 	.word	0x20000188

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000188 	.word	0x20000188

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_Delay+0x40>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000008 	.word	0x20000008

08000f48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e033      	b.n	8000fc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d109      	bne.n	8000f7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fdb8 	bl	8000adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d118      	bne.n	8000fb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f8e:	f023 0302 	bic.w	r3, r3, #2
 8000f92:	f043 0202 	orr.w	r2, r3, #2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 fb6c 	bl	8001678 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f023 0303 	bic.w	r3, r3, #3
 8000fae:	f043 0201 	orr.w	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb6:	e001      	b.n	8000fbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <HAL_ADC_Start_IT+0x1a>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e0b0      	b.n	800114c <HAL_ADC_Start_IT+0x17c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d018      	beq.n	8001032 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001010:	4b51      	ldr	r3, [pc, #324]	; (8001158 <HAL_ADC_Start_IT+0x188>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a51      	ldr	r2, [pc, #324]	; (800115c <HAL_ADC_Start_IT+0x18c>)
 8001016:	fba2 2303 	umull	r2, r3, r2, r3
 800101a:	0c9a      	lsrs	r2, r3, #18
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001024:	e002      	b.n	800102c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	3b01      	subs	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f9      	bne.n	8001026 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b01      	cmp	r3, #1
 800103e:	f040 8084 	bne.w	800114a <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800106c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001080:	d106      	bne.n	8001090 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f023 0206 	bic.w	r2, r3, #6
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
 800108e:	e002      	b.n	8001096 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_ADC_Start_IT+0x190>)
 80010a0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010aa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6812      	ldr	r2, [r2, #0]
 80010b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d12a      	bne.n	8001122 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a24      	ldr	r2, [pc, #144]	; (8001164 <HAL_ADC_Start_IT+0x194>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d015      	beq.n	8001102 <HAL_ADC_Start_IT+0x132>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a23      	ldr	r2, [pc, #140]	; (8001168 <HAL_ADC_Start_IT+0x198>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d105      	bne.n	80010ec <HAL_ADC_Start_IT+0x11c>
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <HAL_ADC_Start_IT+0x190>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 031f 	and.w	r3, r3, #31
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00a      	beq.n	8001102 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1e      	ldr	r2, [pc, #120]	; (800116c <HAL_ADC_Start_IT+0x19c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d129      	bne.n	800114a <HAL_ADC_Start_IT+0x17a>
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_ADC_Start_IT+0x190>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	d823      	bhi.n	800114a <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d11c      	bne.n	800114a <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	e013      	b.n	800114a <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_ADC_Start_IT+0x194>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d10e      	bne.n	800114a <HAL_ADC_Start_IT+0x17a>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d107      	bne.n	800114a <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001148:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000000 	.word	0x20000000
 800115c:	431bde83 	.word	0x431bde83
 8001160:	40012300 	.word	0x40012300
 8001164:	40012000 	.word	0x40012000
 8001168:	40012100 	.word	0x40012100
 800116c:	40012200 	.word	0x40012200

08001170 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b02      	cmp	r3, #2
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	2b20      	cmp	r3, #32
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d049      	beq.n	8001246 <HAL_ADC_IRQHandler+0xd6>
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d046      	beq.n	8001246 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d12b      	bne.n	8001236 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d127      	bne.n	8001236 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d119      	bne.n	8001236 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0220 	bic.w	r2, r2, #32
 8001210:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff f9a0 	bl	800057c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f06f 0212 	mvn.w	r2, #18
 8001244:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b04      	cmp	r3, #4
 8001252:	bf0c      	ite	eq
 8001254:	2301      	moveq	r3, #1
 8001256:	2300      	movne	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	2b80      	cmp	r3, #128	; 0x80
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d057      	beq.n	8001328 <HAL_ADC_IRQHandler+0x1b8>
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d054      	beq.n	8001328 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d139      	bne.n	8001318 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d12b      	bne.n	8001318 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d124      	bne.n	8001318 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d11d      	bne.n	8001318 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d119      	bne.n	8001318 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 faa9 	bl	8001870 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f06f 020c 	mvn.w	r2, #12
 8001326:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b01      	cmp	r3, #1
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001348:	2b40      	cmp	r3, #64	; 0x40
 800134a:	bf0c      	ite	eq
 800134c:	2301      	moveq	r3, #1
 800134e:	2300      	movne	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d017      	beq.n	800138a <HAL_ADC_IRQHandler+0x21a>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d014      	beq.n	800138a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10d      	bne.n	800138a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f846 	bl	800140c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f06f 0201 	mvn.w	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b20      	cmp	r3, #32
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d015      	beq.n	80013ea <HAL_ADC_IRQHandler+0x27a>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d012      	beq.n	80013ea <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f043 0202 	orr.w	r2, r3, #2
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f06f 0220 	mvn.w	r2, #32
 80013d8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f820 	bl	8001420 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f06f 0220 	mvn.w	r2, #32
 80013e8:	601a      	str	r2, [r3, #0]
  }
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x1c>
 800144c:	2302      	movs	r3, #2
 800144e:	e105      	b.n	800165c <HAL_ADC_ConfigChannel+0x228>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b09      	cmp	r3, #9
 800145e:	d925      	bls.n	80014ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68d9      	ldr	r1, [r3, #12]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	3b1e      	subs	r3, #30
 8001476:	2207      	movs	r2, #7
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43da      	mvns	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	400a      	ands	r2, r1
 8001484:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68d9      	ldr	r1, [r3, #12]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	4603      	mov	r3, r0
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4403      	add	r3, r0
 800149e:	3b1e      	subs	r3, #30
 80014a0:	409a      	lsls	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	e022      	b.n	80014f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6919      	ldr	r1, [r3, #16]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	2207      	movs	r2, #7
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	400a      	ands	r2, r1
 80014ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6919      	ldr	r1, [r3, #16]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	4603      	mov	r3, r0
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4403      	add	r3, r0
 80014e8:	409a      	lsls	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d824      	bhi.n	8001544 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b05      	subs	r3, #5
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b05      	subs	r3, #5
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	; 0x34
 8001542:	e04c      	b.n	80015de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b0c      	cmp	r3, #12
 800154a:	d824      	bhi.n	8001596 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	3b23      	subs	r3, #35	; 0x23
 800155e:	221f      	movs	r2, #31
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43da      	mvns	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	400a      	ands	r2, r1
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	3b23      	subs	r3, #35	; 0x23
 8001588:	fa00 f203 	lsl.w	r2, r0, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
 8001594:	e023      	b.n	80015de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	3b41      	subs	r3, #65	; 0x41
 80015a8:	221f      	movs	r2, #31
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	400a      	ands	r2, r1
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	3b41      	subs	r3, #65	; 0x41
 80015d2:	fa00 f203 	lsl.w	r2, r0, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_ADC_ConfigChannel+0x234>)
 80015e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <HAL_ADC_ConfigChannel+0x238>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d109      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x1cc>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b12      	cmp	r3, #18
 80015f2:	d105      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_ADC_ConfigChannel+0x238>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d123      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x21e>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b10      	cmp	r3, #16
 8001610:	d003      	beq.n	800161a <HAL_ADC_ConfigChannel+0x1e6>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b11      	cmp	r3, #17
 8001618:	d11b      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b10      	cmp	r3, #16
 800162c:	d111      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_ADC_ConfigChannel+0x23c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a10      	ldr	r2, [pc, #64]	; (8001674 <HAL_ADC_ConfigChannel+0x240>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	0c9a      	lsrs	r2, r3, #18
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001644:	e002      	b.n	800164c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3b01      	subs	r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f9      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40012300 	.word	0x40012300
 800166c:	40012000 	.word	0x40012000
 8001670:	20000000 	.word	0x20000000
 8001674:	431bde83 	.word	0x431bde83

08001678 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001680:	4b79      	ldr	r3, [pc, #484]	; (8001868 <ADC_Init+0x1f0>)
 8001682:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	431a      	orrs	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	021a      	lsls	r2, r3, #8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6899      	ldr	r1, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	4a58      	ldr	r2, [pc, #352]	; (800186c <ADC_Init+0x1f4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d022      	beq.n	8001756 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800171e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6899      	ldr	r1, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	e00f      	b.n	8001776 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001774:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0202 	bic.w	r2, r2, #2
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7e1b      	ldrb	r3, [r3, #24]
 8001790:	005a      	lsls	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01b      	beq.n	80017dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6859      	ldr	r1, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	3b01      	subs	r3, #1
 80017d0:	035a      	lsls	r2, r3, #13
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	e007      	b.n	80017ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	3b01      	subs	r3, #1
 8001808:	051a      	lsls	r2, r3, #20
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800182e:	025a      	lsls	r2, r3, #9
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6899      	ldr	r1, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	029a      	lsls	r2, r3, #10
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	609a      	str	r2, [r3, #8]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40012300 	.word	0x40012300
 800186c:	0f000001 	.word	0x0f000001

08001870 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	210f      	movs	r1, #15
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff8e 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff29 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4c:	f7ff ff3e 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f7ff ff8e 	bl	8001978 <NVIC_EncodePriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff5d 	bl	8001924 <__NVIC_SetPriority>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff31 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffa2 	bl	80019e0 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e014      	b.n	8001ae2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff f853 	bl	8000b74 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	795b      	ldrb	r3, [r3, #5]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_DAC_Start+0x1e>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e050      	b.n	8001baa <HAL_DAC_Start+0xc0>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11a      	bne.n	8001b64 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b44:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d127      	bne.n	8001b9c <HAL_DAC_Start+0xb2>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b38      	cmp	r3, #56	; 0x38
 8001b50:	d124      	bne.n	8001b9c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e01b      	b.n	8001b9c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001b7a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b82:	d10b      	bne.n	8001b9c <HAL_DAC_Start+0xb2>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001b8a:	d107      	bne.n	8001b9c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0202 	orr.w	r2, r2, #2
 8001b9a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b087      	sub	sp, #28
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	795b      	ldrb	r3, [r3, #5]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_DAC_ConfigChannel+0x20>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e036      	b.n	8001c44 <HAL_DAC_ConfigChannel+0x8e>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2202      	movs	r2, #2
 8001be0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001bea:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	22c0      	movs	r2, #192	; 0xc0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43da      	mvns	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	400a      	ands	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d004      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00c      	b.n	8001c88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2205      	movs	r2, #5
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e16b      	b.n	8001f88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f040 815a 	bne.w	8001f82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d00b      	beq.n	8001cee <HAL_GPIO_Init+0x5a>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce2:	2b11      	cmp	r3, #17
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b12      	cmp	r3, #18
 8001cec:	d130      	bne.n	8001d50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0xfc>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d123      	bne.n	8001dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80b4 	beq.w	8001f82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	; (8001f9c <HAL_GPIO_Init+0x308>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a5e      	ldr	r2, [pc, #376]	; (8001f9c <HAL_GPIO_Init+0x308>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <HAL_GPIO_Init+0x308>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e36:	4a5a      	ldr	r2, [pc, #360]	; (8001fa0 <HAL_GPIO_Init+0x30c>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <HAL_GPIO_Init+0x310>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d02b      	beq.n	8001eba <HAL_GPIO_Init+0x226>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <HAL_GPIO_Init+0x314>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d025      	beq.n	8001eb6 <HAL_GPIO_Init+0x222>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4f      	ldr	r2, [pc, #316]	; (8001fac <HAL_GPIO_Init+0x318>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01f      	beq.n	8001eb2 <HAL_GPIO_Init+0x21e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4e      	ldr	r2, [pc, #312]	; (8001fb0 <HAL_GPIO_Init+0x31c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d019      	beq.n	8001eae <HAL_GPIO_Init+0x21a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0x216>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4c      	ldr	r2, [pc, #304]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00d      	beq.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4b      	ldr	r2, [pc, #300]	; (8001fbc <HAL_GPIO_Init+0x328>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <HAL_GPIO_Init+0x20e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <HAL_GPIO_Init+0x32c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_GPIO_Init+0x20a>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e00e      	b.n	8001ebc <HAL_GPIO_Init+0x228>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	e00c      	b.n	8001ebc <HAL_GPIO_Init+0x228>
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	e00a      	b.n	8001ebc <HAL_GPIO_Init+0x228>
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	e008      	b.n	8001ebc <HAL_GPIO_Init+0x228>
 8001eaa:	2304      	movs	r3, #4
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x228>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e004      	b.n	8001ebc <HAL_GPIO_Init+0x228>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_Init+0x228>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x228>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f002 0203 	and.w	r2, r2, #3
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	4093      	lsls	r3, r2
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ecc:	4934      	ldr	r1, [pc, #208]	; (8001fa0 <HAL_GPIO_Init+0x30c>)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001efe:	4a31      	ldr	r2, [pc, #196]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	f67f ae90 	bls.w	8001cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	3724      	adds	r7, #36	; 0x24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40021400 	.word	0x40021400
 8001fbc:	40021800 	.word	0x40021800
 8001fc0:	40021c00 	.word	0x40021c00
 8001fc4:	40013c00 	.word	0x40013c00

08001fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e001      	b.n	8001fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
 8002004:	4613      	mov	r3, r2
 8002006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002014:	e003      	b.n	800201e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	041a      	lsls	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	619a      	str	r2, [r3, #24]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800202a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202c:	b08f      	sub	sp, #60	; 0x3c
 800202e:	af0a      	add	r7, sp, #40	; 0x28
 8002030:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e054      	b.n	80020e6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f005 fe32 	bl	8007cc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2203      	movs	r2, #3
 8002060:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f002 ffee 	bl	800505c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	687e      	ldr	r6, [r7, #4]
 8002088:	466d      	mov	r5, sp
 800208a:	f106 0410 	add.w	r4, r6, #16
 800208e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002096:	e894 0003 	ldmia.w	r4, {r0, r1}
 800209a:	e885 0003 	stmia.w	r5, {r0, r1}
 800209e:	1d33      	adds	r3, r6, #4
 80020a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a2:	6838      	ldr	r0, [r7, #0]
 80020a4:	f002 ff68 	bl	8004f78 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2101      	movs	r1, #1
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 ffe5 	bl	800507e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	687e      	ldr	r6, [r7, #4]
 80020bc:	466d      	mov	r5, sp
 80020be:	f106 0410 	add.w	r4, r6, #16
 80020c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80020d2:	1d33      	adds	r3, r6, #4
 80020d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d6:	6838      	ldr	r0, [r7, #0]
 80020d8:	f003 f8f8 	bl	80052cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ee <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020ee:	b590      	push	{r4, r7, lr}
 80020f0:	b089      	sub	sp, #36	; 0x24
 80020f2:	af04      	add	r7, sp, #16
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	4608      	mov	r0, r1
 80020f8:	4611      	mov	r1, r2
 80020fa:	461a      	mov	r2, r3
 80020fc:	4603      	mov	r3, r0
 80020fe:	70fb      	strb	r3, [r7, #3]
 8002100:	460b      	mov	r3, r1
 8002102:	70bb      	strb	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_HCD_HC_Init+0x28>
 8002112:	2302      	movs	r3, #2
 8002114:	e07f      	b.n	8002216 <HAL_HCD_HC_Init+0x128>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	333d      	adds	r3, #61	; 0x3d
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	3338      	adds	r3, #56	; 0x38
 8002142:	787a      	ldrb	r2, [r7, #1]
 8002144:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	3340      	adds	r3, #64	; 0x40
 8002156:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002158:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	3339      	adds	r3, #57	; 0x39
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	333f      	adds	r3, #63	; 0x3f
 800217e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002182:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	78bb      	ldrb	r3, [r7, #2]
 8002188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800218c:	b2d8      	uxtb	r0, r3
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	333a      	adds	r3, #58	; 0x3a
 800219c:	4602      	mov	r2, r0
 800219e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da0a      	bge.n	80021be <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	333b      	adds	r3, #59	; 0x3b
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e009      	b.n	80021d2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	333b      	adds	r3, #59	; 0x3b
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	333c      	adds	r3, #60	; 0x3c
 80021e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021e6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	787c      	ldrb	r4, [r7, #1]
 80021ee:	78ba      	ldrb	r2, [r7, #2]
 80021f0:	78f9      	ldrb	r1, [r7, #3]
 80021f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021f4:	9302      	str	r3, [sp, #8]
 80021f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	4623      	mov	r3, r4
 8002204:	f003 f9e4 	bl	80055d0 <USB_HC_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bd90      	pop	{r4, r7, pc}

0800221e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_HCD_HC_Halt+0x1e>
 8002238:	2302      	movs	r3, #2
 800223a:	e00f      	b.n	800225c <HAL_HCD_HC_Halt+0x3e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fc20 	bl	8005a92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4603      	mov	r3, r0
 8002274:	70fb      	strb	r3, [r7, #3]
 8002276:	460b      	mov	r3, r1
 8002278:	70bb      	strb	r3, [r7, #2]
 800227a:	4613      	mov	r3, r2
 800227c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	333b      	adds	r3, #59	; 0x3b
 800228e:	78ba      	ldrb	r2, [r7, #2]
 8002290:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	333f      	adds	r3, #63	; 0x3f
 80022a2:	787a      	ldrb	r2, [r7, #1]
 80022a4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022a6:	7c3b      	ldrb	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d114      	bne.n	80022d6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3342      	adds	r3, #66	; 0x42
 80022bc:	2203      	movs	r2, #3
 80022be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	333d      	adds	r3, #61	; 0x3d
 80022d0:	7f3a      	ldrb	r2, [r7, #28]
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e009      	b.n	80022ea <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	3342      	adds	r3, #66	; 0x42
 80022e6:	2202      	movs	r2, #2
 80022e8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022ea:	787b      	ldrb	r3, [r7, #1]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	f200 80d6 	bhi.w	800249e <HAL_HCD_HC_SubmitRequest+0x23a>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	08002309 	.word	0x08002309
 80022fc:	08002489 	.word	0x08002489
 8002300:	08002375 	.word	0x08002375
 8002304:	080023ff 	.word	0x080023ff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002308:	7c3b      	ldrb	r3, [r7, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 80c9 	bne.w	80024a2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002310:	78bb      	ldrb	r3, [r7, #2]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 80c5 	bne.w	80024a2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002318:	8b3b      	ldrh	r3, [r7, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	3351      	adds	r3, #81	; 0x51
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	3351      	adds	r3, #81	; 0x51
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10a      	bne.n	800235e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	3342      	adds	r3, #66	; 0x42
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800235c:	e0a1      	b.n	80024a2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	3342      	adds	r3, #66	; 0x42
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
      break;
 8002372:	e096      	b.n	80024a2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002374:	78bb      	ldrb	r3, [r7, #2]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d120      	bne.n	80023bc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	3351      	adds	r3, #81	; 0x51
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	3342      	adds	r3, #66	; 0x42
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023a4:	e07e      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	3342      	adds	r3, #66	; 0x42
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
      break;
 80023ba:	e073      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	3350      	adds	r3, #80	; 0x50
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10a      	bne.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	3342      	adds	r3, #66	; 0x42
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e05d      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	3342      	adds	r3, #66	; 0x42
 80023f8:	2202      	movs	r2, #2
 80023fa:	701a      	strb	r2, [r3, #0]
      break;
 80023fc:	e052      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023fe:	78bb      	ldrb	r3, [r7, #2]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d120      	bne.n	8002446 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	3351      	adds	r3, #81	; 0x51
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3342      	adds	r3, #66	; 0x42
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800242e:	e039      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	3342      	adds	r3, #66	; 0x42
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
      break;
 8002444:	e02e      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	3350      	adds	r3, #80	; 0x50
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3342      	adds	r3, #66	; 0x42
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
      break;
 8002470:	e018      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	3342      	adds	r3, #66	; 0x42
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
      break;
 8002486:	e00d      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3342      	adds	r3, #66	; 0x42
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
      break;
 800249c:	e002      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800249e:	bf00      	nop
 80024a0:	e000      	b.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80024a2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	3344      	adds	r3, #68	; 0x44
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	8b39      	ldrh	r1, [r7, #24]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4403      	add	r3, r0
 80024c8:	3348      	adds	r3, #72	; 0x48
 80024ca:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	335c      	adds	r3, #92	; 0x5c
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	334c      	adds	r3, #76	; 0x4c
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	3339      	adds	r3, #57	; 0x39
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	335d      	adds	r3, #93	; 0x5d
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	3338      	adds	r3, #56	; 0x38
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	18d1      	adds	r1, r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	f003 f954 	bl	80057e4 <USB_HC_StartXfer>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop

08002548 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fe71 	bl	8005246 <USB_GetMode>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	f040 80ef 	bne.w	800274a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f002 fe55 	bl	8005220 <USB_ReadInterrupts>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80e5 	beq.w	8002748 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f002 fe4c 	bl	8005220 <USB_ReadInterrupts>
 8002588:	4603      	mov	r3, r0
 800258a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002592:	d104      	bne.n	800259e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800259c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 fe3c 	bl	8005220 <USB_ReadInterrupts>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025b2:	d104      	bne.n	80025be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 fe2c 	bl	8005220 <USB_ReadInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d2:	d104      	bne.n	80025de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fe1c 	bl	8005220 <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d103      	bne.n	80025fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2202      	movs	r2, #2
 80025f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fe0e 	bl	8005220 <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800260a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800260e:	d115      	bne.n	800263c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002618:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d108      	bne.n	800263c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f005 fbc6 	bl	8007dbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2101      	movs	r1, #1
 8002636:	4618      	mov	r0, r3
 8002638:	f002 ff04 	bl	8005444 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f002 fded 	bl	8005220 <USB_ReadInterrupts>
 8002646:	4603      	mov	r3, r0
 8002648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800264c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002650:	d102      	bne.n	8002658 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f001 f966 	bl	8003924 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fddf 	bl	8005220 <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d106      	bne.n	800267a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f005 fb89 	bl	8007d84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2208      	movs	r2, #8
 8002678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fdce 	bl	8005220 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800268e:	d138      	bne.n	8002702 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f003 f9eb 	bl	8005a70 <USB_HC_ReadInterrupt>
 800269a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e025      	b.n	80026ee <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d018      	beq.n	80026e8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026cc:	d106      	bne.n	80026dc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8cf 	bl	8002878 <HCD_HC_IN_IRQHandler>
 80026da:	e005      	b.n	80026e8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	4619      	mov	r1, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fcfd 	bl	80030e2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3d4      	bcc.n	80026a2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fd8a 	bl	8005220 <USB_ReadInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b10      	cmp	r3, #16
 8002714:	d101      	bne.n	800271a <HAL_HCD_IRQHandler+0x1d2>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_HCD_IRQHandler+0x1d4>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d014      	beq.n	800274a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0210 	bic.w	r2, r2, #16
 800272e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f001 f84b 	bl	80037cc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0210 	orr.w	r2, r2, #16
 8002744:	619a      	str	r2, [r3, #24]
 8002746:	e000      	b.n	800274a <HAL_HCD_IRQHandler+0x202>
      return;
 8002748:	bf00      	nop
    }
  }
}
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_HCD_Start+0x16>
 8002762:	2302      	movs	r3, #2
 8002764:	e013      	b.n	800278e <HAL_HCD_Start+0x3e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fc61 	bl	800503a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fec4 	bl	800550c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_HCD_Stop+0x16>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e00d      	b.n	80027c8 <HAL_HCD_Stop+0x32>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 faa5 	bl	8005d08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fe6b 	bl	80054b8 <USB_ResetPort>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	335c      	adds	r3, #92	; 0x5c
 8002808:	781b      	ldrb	r3, [r3, #0]
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	334c      	adds	r3, #76	; 0x4c
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f002 fead 	bl	80055ac <USB_GetCurrentFrame>
 8002852:	4603      	mov	r3, r0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fe88 	bl	800557e <USB_GetHostSpeed>
 800286e:	4603      	mov	r3, r0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d119      	bne.n	80028dc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	2304      	movs	r3, #4
 80028b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	0151      	lsls	r1, r2, #5
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	440a      	add	r2, r1
 80028d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	60d3      	str	r3, [r2, #12]
 80028da:	e0ce      	b.n	8002a7a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f2:	d12c      	bne.n	800294e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002906:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	335d      	adds	r3, #93	; 0x5d
 8002918:	2207      	movs	r2, #7
 800291a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	0151      	lsls	r1, r2, #5
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	440a      	add	r2, r1
 8002932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002936:	f043 0302 	orr.w	r3, r3, #2
 800293a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f003 f8a3 	bl	8005a92 <USB_HC_Halt>
 800294c:	e095      	b.n	8002a7a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b20      	cmp	r3, #32
 8002962:	d109      	bne.n	8002978 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	461a      	mov	r2, r3
 8002972:	2320      	movs	r3, #32
 8002974:	6093      	str	r3, [r2, #8]
 8002976:	e080      	b.n	8002a7a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b08      	cmp	r3, #8
 800298c:	d134      	bne.n	80029f8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	0151      	lsls	r1, r2, #5
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	440a      	add	r2, r1
 80029a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	335d      	adds	r3, #93	; 0x5d
 80029be:	2205      	movs	r2, #5
 80029c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	2310      	movs	r3, #16
 80029d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	461a      	mov	r2, r3
 80029e2:	2308      	movs	r3, #8
 80029e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 f84e 	bl	8005a92 <USB_HC_Halt>
 80029f6:	e040      	b.n	8002a7a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d134      	bne.n	8002a7a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	0151      	lsls	r1, r2, #5
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	440a      	add	r2, r1
 8002a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a2a:	f043 0302 	orr.w	r3, r3, #2
 8002a2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 f829 	bl	8005a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2310      	movs	r3, #16
 8002a50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	335d      	adds	r3, #93	; 0x5d
 8002a62:	2208      	movs	r2, #8
 8002a64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a72:	461a      	mov	r2, r3
 8002a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a78:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a90:	d122      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	0151      	lsls	r1, r2, #5
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	440a      	add	r2, r1
 8002aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 ffe8 	bl	8005a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ad6:	e300      	b.n	80030da <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	f040 80fd 	bne.w	8002cea <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	3348      	adds	r3, #72	; 0x48
 8002b08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	0159      	lsls	r1, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	440b      	add	r3, r1
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b1c:	1ad1      	subs	r1, r2, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4403      	add	r3, r0
 8002b2c:	334c      	adds	r3, #76	; 0x4c
 8002b2e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	335d      	adds	r3, #93	; 0x5d
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	3358      	adds	r3, #88	; 0x58
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	461a      	mov	r2, r3
 8002b66:	2301      	movs	r3, #1
 8002b68:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	333f      	adds	r3, #63	; 0x3f
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	333f      	adds	r3, #63	; 0x3f
 8002b90:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d121      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	0151      	lsls	r1, r2, #5
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	440a      	add	r2, r1
 8002bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 ff66 	bl	8005a92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	6093      	str	r3, [r2, #8]
 8002bd8:	e070      	b.n	8002cbc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	333f      	adds	r3, #63	; 0x3f
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d12a      	bne.n	8002c46 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	0151      	lsls	r1, r2, #5
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	440a      	add	r2, r1
 8002c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c0e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	335c      	adds	r3, #92	; 0x5c
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	b2d8      	uxtb	r0, r3
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	335c      	adds	r3, #92	; 0x5c
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4601      	mov	r1, r0
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f005 f8ca 	bl	8007dd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c44:	e03a      	b.n	8002cbc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	333f      	adds	r3, #63	; 0x3f
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d12f      	bne.n	8002cbc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	335c      	adds	r3, #92	; 0x5c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3350      	adds	r3, #80	; 0x50
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2d8      	uxtb	r0, r3
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	3350      	adds	r3, #80	; 0x50
 8002c98:	4602      	mov	r2, r0
 8002c9a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	b2d8      	uxtb	r0, r3
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	335c      	adds	r3, #92	; 0x5c
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f005 f88e 	bl	8007dd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	3350      	adds	r3, #80	; 0x50
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	f083 0301 	eor.w	r3, r3, #1
 8002cd2:	b2d8      	uxtb	r0, r3
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3350      	adds	r3, #80	; 0x50
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	701a      	strb	r2, [r3, #0]
}
 8002ce8:	e1f7      	b.n	80030da <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	f040 811a 	bne.w	8002f36 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	0151      	lsls	r1, r2, #5
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	440a      	add	r2, r1
 8002d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1c:	f023 0302 	bic.w	r3, r3, #2
 8002d20:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	335d      	adds	r3, #93	; 0x5d
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d10a      	bne.n	8002d4e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	335c      	adds	r3, #92	; 0x5c
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e0d9      	b.n	8002f02 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	335d      	adds	r3, #93	; 0x5d
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d10a      	bne.n	8002d7a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	335c      	adds	r3, #92	; 0x5c
 8002d74:	2205      	movs	r2, #5
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e0c3      	b.n	8002f02 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	335d      	adds	r3, #93	; 0x5d
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d00a      	beq.n	8002da6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	335d      	adds	r3, #93	; 0x5d
 8002da0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d156      	bne.n	8002e54 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	440b      	add	r3, r1
 8002db4:	3358      	adds	r3, #88	; 0x58
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	1c59      	adds	r1, r3, #1
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4403      	add	r3, r0
 8002dc8:	3358      	adds	r3, #88	; 0x58
 8002dca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	3358      	adds	r3, #88	; 0x58
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d914      	bls.n	8002e0c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	3358      	adds	r3, #88	; 0x58
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	335c      	adds	r3, #92	; 0x5c
 8002e06:	2204      	movs	r2, #4
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e009      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	335c      	adds	r3, #92	; 0x5c
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e36:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e3e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e056      	b.n	8002f02 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	335d      	adds	r3, #93	; 0x5d
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d123      	bne.n	8002eb2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	335c      	adds	r3, #92	; 0x5c
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e94:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e9c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	e027      	b.n	8002f02 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	335d      	adds	r3, #93	; 0x5d
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b07      	cmp	r3, #7
 8002ec6:	d11c      	bne.n	8002f02 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3358      	adds	r3, #88	; 0x58
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	1c59      	adds	r1, r3, #1
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4403      	add	r3, r0
 8002eea:	3358      	adds	r3, #88	; 0x58
 8002eec:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	335c      	adds	r3, #92	; 0x5c
 8002efe:	2204      	movs	r2, #4
 8002f00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2302      	movs	r3, #2
 8002f12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	b2d8      	uxtb	r0, r3
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	335c      	adds	r3, #92	; 0x5c
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4601      	mov	r1, r0
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f004 ff52 	bl	8007dd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f34:	e0d1      	b.n	80030da <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	d13e      	bne.n	8002fca <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	0151      	lsls	r1, r2, #5
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	440a      	add	r2, r1
 8002f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	3358      	adds	r3, #88	; 0x58
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	1c59      	adds	r1, r3, #1
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4403      	add	r3, r0
 8002f8e:	3358      	adds	r3, #88	; 0x58
 8002f90:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	335d      	adds	r3, #93	; 0x5d
 8002fa2:	2206      	movs	r2, #6
 8002fa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f002 fd6e 	bl	8005a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	6093      	str	r3, [r2, #8]
}
 8002fc8:	e087      	b.n	80030da <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d17c      	bne.n	80030da <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	333f      	adds	r3, #63	; 0x3f
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d122      	bne.n	800303c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	3358      	adds	r3, #88	; 0x58
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	0151      	lsls	r1, r2, #5
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	440a      	add	r2, r1
 8003020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f002 fd2c 	bl	8005a92 <USB_HC_Halt>
 800303a:	e045      	b.n	80030c8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	333f      	adds	r3, #63	; 0x3f
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	440b      	add	r3, r1
 8003060:	333f      	adds	r3, #63	; 0x3f
 8003062:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003064:	2b02      	cmp	r3, #2
 8003066:	d12f      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	440b      	add	r3, r1
 8003076:	3358      	adds	r3, #88	; 0x58
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d121      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	335d      	adds	r3, #93	; 0x5d
 8003094:	2203      	movs	r2, #3
 8003096:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	0151      	lsls	r1, r2, #5
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	440a      	add	r2, r1
 80030ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030b2:	f043 0302 	orr.w	r3, r3, #2
 80030b6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f002 fce5 	bl	8005a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	461a      	mov	r2, r3
 80030d6:	2310      	movs	r3, #16
 80030d8:	6093      	str	r3, [r2, #8]
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	d119      	bne.n	8003146 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	461a      	mov	r2, r3
 8003120:	2304      	movs	r3, #4
 8003122:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	0151      	lsls	r1, r2, #5
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	440a      	add	r2, r1
 800313a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800313e:	f043 0302 	orr.w	r3, r3, #2
 8003142:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003144:	e33e      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4413      	add	r3, r2
 800314e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b20      	cmp	r3, #32
 800315a:	d141      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	461a      	mov	r2, r3
 800316a:	2320      	movs	r3, #32
 800316c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	333d      	adds	r3, #61	; 0x3d
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b01      	cmp	r3, #1
 8003182:	f040 831f 	bne.w	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	333d      	adds	r3, #61	; 0x3d
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	335c      	adds	r3, #92	; 0x5c
 80031aa:	2202      	movs	r2, #2
 80031ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	0151      	lsls	r1, r2, #5
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	440a      	add	r2, r1
 80031c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 fc5a 	bl	8005a92 <USB_HC_Halt>
}
 80031de:	e2f1      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d13f      	bne.n	8003276 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	440b      	add	r3, r1
 8003204:	335d      	adds	r3, #93	; 0x5d
 8003206:	2204      	movs	r2, #4
 8003208:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	333d      	adds	r3, #61	; 0x3d
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	3358      	adds	r3, #88	; 0x58
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	0151      	lsls	r1, r2, #5
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	440a      	add	r2, r1
 8003248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f002 fc18 	bl	8005a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	461a      	mov	r2, r3
 8003270:	2340      	movs	r3, #64	; 0x40
 8003272:	6093      	str	r3, [r2, #8]
}
 8003274:	e2a6      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328c:	d122      	bne.n	80032d4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	0151      	lsls	r1, r2, #5
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	440a      	add	r2, r1
 80032a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 fbea 	bl	8005a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ca:	461a      	mov	r2, r3
 80032cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d0:	6093      	str	r3, [r2, #8]
}
 80032d2:	e277      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d135      	bne.n	8003356 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	3358      	adds	r3, #88	; 0x58
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	0151      	lsls	r1, r2, #5
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	440a      	add	r2, r1
 8003314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f002 fbb2 	bl	8005a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	2301      	movs	r3, #1
 800333e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	335d      	adds	r3, #93	; 0x5d
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
}
 8003354:	e236      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d12b      	bne.n	80033c4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003378:	461a      	mov	r2, r3
 800337a:	2308      	movs	r3, #8
 800337c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	0151      	lsls	r1, r2, #5
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	440a      	add	r2, r1
 8003394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f002 fb72 	bl	8005a92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	440b      	add	r3, r1
 80033bc:	335d      	adds	r3, #93	; 0x5d
 80033be:	2205      	movs	r2, #5
 80033c0:	701a      	strb	r2, [r3, #0]
}
 80033c2:	e1ff      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d155      	bne.n	8003486 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	3358      	adds	r3, #88	; 0x58
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	335d      	adds	r3, #93	; 0x5d
 80033fe:	2203      	movs	r2, #3
 8003400:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	333d      	adds	r3, #61	; 0x3d
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d114      	bne.n	8003442 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	333c      	adds	r3, #60	; 0x3c
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	333d      	adds	r3, #61	; 0x3d
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	0151      	lsls	r1, r2, #5
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	440a      	add	r2, r1
 8003458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f002 fb10 	bl	8005a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347e:	461a      	mov	r2, r3
 8003480:	2310      	movs	r3, #16
 8003482:	6093      	str	r3, [r2, #8]
}
 8003484:	e19e      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4413      	add	r3, r2
 800348e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b80      	cmp	r3, #128	; 0x80
 800349a:	d12b      	bne.n	80034f4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	0151      	lsls	r1, r2, #5
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	440a      	add	r2, r1
 80034b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 fae3 	bl	8005a92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	440b      	add	r3, r1
 80034da:	335d      	adds	r3, #93	; 0x5d
 80034dc:	2206      	movs	r2, #6
 80034de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	461a      	mov	r2, r3
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	6093      	str	r3, [r2, #8]
}
 80034f2:	e167      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350a:	d135      	bne.n	8003578 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	0151      	lsls	r1, r2, #5
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	440a      	add	r2, r1
 8003522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003526:	f043 0302 	orr.w	r3, r3, #2
 800352a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f002 faab 	bl	8005a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003548:	461a      	mov	r2, r3
 800354a:	2310      	movs	r3, #16
 800354c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355a:	461a      	mov	r2, r3
 800355c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003560:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	440b      	add	r3, r1
 8003570:	335d      	adds	r3, #93	; 0x5d
 8003572:	2208      	movs	r2, #8
 8003574:	701a      	strb	r2, [r3, #0]
}
 8003576:	e125      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	f040 811a 	bne.w	80037c4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035aa:	f023 0302 	bic.w	r3, r3, #2
 80035ae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	335d      	adds	r3, #93	; 0x5d
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d137      	bne.n	8003636 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	440b      	add	r3, r1
 80035d4:	335c      	adds	r3, #92	; 0x5c
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	440b      	add	r3, r1
 80035e8:	333f      	adds	r3, #63	; 0x3f
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d00b      	beq.n	8003608 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	440b      	add	r3, r1
 80035fe:	333f      	adds	r3, #63	; 0x3f
 8003600:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003602:	2b03      	cmp	r3, #3
 8003604:	f040 80c5 	bne.w	8003792 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	3351      	adds	r3, #81	; 0x51
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	f083 0301 	eor.w	r3, r3, #1
 800361e:	b2d8      	uxtb	r0, r3
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	440b      	add	r3, r1
 800362e:	3351      	adds	r3, #81	; 0x51
 8003630:	4602      	mov	r2, r0
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e0ad      	b.n	8003792 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	440b      	add	r3, r1
 8003644:	335d      	adds	r3, #93	; 0x5d
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d10a      	bne.n	8003662 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	440b      	add	r3, r1
 800365a:	335c      	adds	r3, #92	; 0x5c
 800365c:	2202      	movs	r2, #2
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e097      	b.n	8003792 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	440b      	add	r3, r1
 8003670:	335d      	adds	r3, #93	; 0x5d
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d10a      	bne.n	800368e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	440b      	add	r3, r1
 8003686:	335c      	adds	r3, #92	; 0x5c
 8003688:	2202      	movs	r2, #2
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e081      	b.n	8003792 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	440b      	add	r3, r1
 800369c:	335d      	adds	r3, #93	; 0x5d
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d10a      	bne.n	80036ba <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	335c      	adds	r3, #92	; 0x5c
 80036b4:	2205      	movs	r2, #5
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e06b      	b.n	8003792 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	335d      	adds	r3, #93	; 0x5d
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b06      	cmp	r3, #6
 80036ce:	d00a      	beq.n	80036e6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	440b      	add	r3, r1
 80036de:	335d      	adds	r3, #93	; 0x5d
 80036e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d155      	bne.n	8003792 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	3358      	adds	r3, #88	; 0x58
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c59      	adds	r1, r3, #1
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4403      	add	r3, r0
 8003708:	3358      	adds	r3, #88	; 0x58
 800370a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	440b      	add	r3, r1
 800371a:	3358      	adds	r3, #88	; 0x58
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d914      	bls.n	800374c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	440b      	add	r3, r1
 8003730:	3358      	adds	r3, #88	; 0x58
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	440b      	add	r3, r1
 8003744:	335c      	adds	r3, #92	; 0x5c
 8003746:	2204      	movs	r2, #4
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	e009      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	440b      	add	r3, r1
 800375a:	335c      	adds	r3, #92	; 0x5c
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003776:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800377e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	461a      	mov	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	461a      	mov	r2, r3
 80037a0:	2302      	movs	r3, #2
 80037a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	b2d8      	uxtb	r0, r3
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	440b      	add	r3, r1
 80037b6:	335c      	adds	r3, #92	; 0x5c
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	4601      	mov	r1, r0
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f004 fb0a 	bl	8007dd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037c4:	bf00      	nop
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	0c5b      	lsrs	r3, r3, #17
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003800:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d003      	beq.n	8003810 <HCD_RXQLVL_IRQHandler+0x44>
 8003808:	2b05      	cmp	r3, #5
 800380a:	f000 8082 	beq.w	8003912 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800380e:	e083      	b.n	8003918 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d07f      	beq.n	8003916 <HCD_RXQLVL_IRQHandler+0x14a>
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	440b      	add	r3, r1
 8003824:	3344      	adds	r3, #68	; 0x44
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d074      	beq.n	8003916 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	3344      	adds	r3, #68	; 0x44
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	b292      	uxth	r2, r2
 8003846:	4619      	mov	r1, r3
 8003848:	f001 fcc1 	bl	80051ce <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	3344      	adds	r3, #68	; 0x44
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	18d1      	adds	r1, r2, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4403      	add	r3, r0
 8003870:	3344      	adds	r3, #68	; 0x44
 8003872:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	334c      	adds	r3, #76	; 0x4c
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	18d1      	adds	r1, r2, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4403      	add	r3, r0
 8003898:	334c      	adds	r3, #76	; 0x4c
 800389a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HCD_RXQLVL_IRQHandler+0x154>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d031      	beq.n	8003916 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	440b      	add	r3, r1
 80038f2:	3350      	adds	r3, #80	; 0x50
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	f083 0301 	eor.w	r3, r3, #1
 80038fa:	b2d8      	uxtb	r0, r3
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	440b      	add	r3, r1
 800390a:	3350      	adds	r3, #80	; 0x50
 800390c:	4602      	mov	r2, r0
 800390e:	701a      	strb	r2, [r3, #0]
      break;
 8003910:	e001      	b.n	8003916 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003916:	bf00      	nop
  }
}
 8003918:	bf00      	nop
 800391a:	3728      	adds	r7, #40	; 0x28
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	1ff80000 	.word	0x1ff80000

08003924 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003950:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d10b      	bne.n	8003974 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d102      	bne.n	800396c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f004 fa1a 	bl	8007da0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f043 0302 	orr.w	r3, r3, #2
 8003972:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b08      	cmp	r3, #8
 800397c:	d132      	bne.n	80039e4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d126      	bne.n	80039de <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d113      	bne.n	80039c0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800399e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039a2:	d106      	bne.n	80039b2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2102      	movs	r1, #2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 fd4a 	bl	8005444 <USB_InitFSLSPClkSel>
 80039b0:	e011      	b.n	80039d6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fd43 	bl	8005444 <USB_InitFSLSPClkSel>
 80039be:	e00a      	b.n	80039d6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d106      	bne.n	80039d6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ce:	461a      	mov	r2, r3
 80039d0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039d4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f004 fa0c 	bl	8007df4 <HAL_HCD_PortEnabled_Callback>
 80039dc:	e002      	b.n	80039e4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f004 fa16 	bl	8007e10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d103      	bne.n	80039f6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f043 0320 	orr.w	r3, r3, #32
 80039f4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6013      	str	r3, [r2, #0]
}
 8003a02:	bf00      	nop
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e25b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d075      	beq.n	8003b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2a:	4ba3      	ldr	r3, [pc, #652]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d00c      	beq.n	8003a50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a36:	4ba0      	ldr	r3, [pc, #640]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d112      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a42:	4b9d      	ldr	r3, [pc, #628]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	4b99      	ldr	r3, [pc, #612]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d05b      	beq.n	8003b14 <HAL_RCC_OscConfig+0x108>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d157      	bne.n	8003b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e236      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a70:	d106      	bne.n	8003a80 <HAL_RCC_OscConfig+0x74>
 8003a72:	4b91      	ldr	r3, [pc, #580]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a90      	ldr	r2, [pc, #576]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e01d      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x98>
 8003a8a:	4b8b      	ldr	r3, [pc, #556]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a8a      	ldr	r2, [pc, #552]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b88      	ldr	r3, [pc, #544]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a87      	ldr	r2, [pc, #540]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003aa4:	4b84      	ldr	r3, [pc, #528]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a83      	ldr	r2, [pc, #524]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b81      	ldr	r3, [pc, #516]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a80      	ldr	r2, [pc, #512]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fa12 	bl	8000eec <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fd fa0e 	bl	8000eec <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1fb      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0xc0>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fd f9fe 	bl	8000eec <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fd f9fa 	bl	8000eec <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e1e7      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	4b6c      	ldr	r3, [pc, #432]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0xe8>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d063      	beq.n	8003bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b22:	4b65      	ldr	r3, [pc, #404]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2e:	4b62      	ldr	r3, [pc, #392]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d11c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d116      	bne.n	8003b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x152>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e1bb      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5e:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4952      	ldr	r1, [pc, #328]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	e03a      	b.n	8003bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <HAL_RCC_OscConfig+0x2b0>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fd f9b3 	bl	8000eec <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fd f9af 	bl	8000eec <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e19c      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9c:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b43      	ldr	r3, [pc, #268]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4940      	ldr	r1, [pc, #256]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]
 8003bbc:	e015      	b.n	8003bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbe:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <HAL_RCC_OscConfig+0x2b0>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fd f992 	bl	8000eec <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bcc:	f7fd f98e 	bl	8000eec <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e17b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d030      	beq.n	8003c58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfe:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <HAL_RCC_OscConfig+0x2b4>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fd f972 	bl	8000eec <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fd f96e 	bl	8000eec <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e15b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1e:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x200>
 8003c2a:	e015      	b.n	8003c58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2c:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_RCC_OscConfig+0x2b4>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7fd f95b 	bl	8000eec <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3a:	f7fd f957 	bl	8000eec <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e144      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a0 	beq.w	8003da6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c66:	2300      	movs	r3, #0
 8003c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6413      	str	r3, [r2, #64]	; 0x40
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_RCC_OscConfig+0x2b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d121      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca2:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <HAL_RCC_OscConfig+0x2b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <HAL_RCC_OscConfig+0x2b8>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cae:	f7fd f91d 	bl	8000eec <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb4:	e011      	b.n	8003cda <HAL_RCC_OscConfig+0x2ce>
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	42470000 	.word	0x42470000
 8003cc0:	42470e80 	.word	0x42470e80
 8003cc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc8:	f7fd f910 	bl	8000eec <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0fd      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b81      	ldr	r3, [pc, #516]	; (8003ee0 <HAL_RCC_OscConfig+0x4d4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d106      	bne.n	8003cfc <HAL_RCC_OscConfig+0x2f0>
 8003cee:	4b7d      	ldr	r3, [pc, #500]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	4a7c      	ldr	r2, [pc, #496]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfa:	e01c      	b.n	8003d36 <HAL_RCC_OscConfig+0x32a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d10c      	bne.n	8003d1e <HAL_RCC_OscConfig+0x312>
 8003d04:	4b77      	ldr	r3, [pc, #476]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	4a76      	ldr	r2, [pc, #472]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d10:	4b74      	ldr	r3, [pc, #464]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	4a73      	ldr	r2, [pc, #460]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1c:	e00b      	b.n	8003d36 <HAL_RCC_OscConfig+0x32a>
 8003d1e:	4b71      	ldr	r3, [pc, #452]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a70      	ldr	r2, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	4b6e      	ldr	r3, [pc, #440]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a6d      	ldr	r2, [pc, #436]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d015      	beq.n	8003d6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3e:	f7fd f8d5 	bl	8000eec <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fd f8d1 	bl	8000eec <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e0bc      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5c:	4b61      	ldr	r3, [pc, #388]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ee      	beq.n	8003d46 <HAL_RCC_OscConfig+0x33a>
 8003d68:	e014      	b.n	8003d94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd f8bf 	bl	8000eec <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fd f8bb 	bl	8000eec <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0a6      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d88:	4b56      	ldr	r3, [pc, #344]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ee      	bne.n	8003d72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4b52      	ldr	r3, [pc, #328]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a51      	ldr	r2, [pc, #324]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8092 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003db0:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d05c      	beq.n	8003e76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d141      	bne.n	8003e48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc4:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <HAL_RCC_OscConfig+0x4dc>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fd f88f 	bl	8000eec <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd f88b 	bl	8000eec <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e078      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de4:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	019b      	lsls	r3, r3, #6
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	041b      	lsls	r3, r3, #16
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	061b      	lsls	r3, r3, #24
 8003e14:	4933      	ldr	r1, [pc, #204]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_RCC_OscConfig+0x4dc>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fd f864 	bl	8000eec <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fd f860 	bl	8000eec <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e04d      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x41c>
 8003e46:	e045      	b.n	8003ed4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e48:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <HAL_RCC_OscConfig+0x4dc>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd f84d 	bl	8000eec <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fd f849 	bl	8000eec <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e036      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x44a>
 8003e74:	e02e      	b.n	8003ed4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e029      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d11c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d115      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eaa:	4013      	ands	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470060 	.word	0x42470060

08003eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0cc      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f00:	4b68      	ldr	r3, [pc, #416]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d90c      	bls.n	8003f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b65      	ldr	r3, [pc, #404]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0b8      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f40:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a58      	ldr	r2, [pc, #352]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f58:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a52      	ldr	r2, [pc, #328]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	494d      	ldr	r1, [pc, #308]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d044      	beq.n	800400c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d119      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e07f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d107      	bne.n	8003fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003faa:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e06f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fba:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e067      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fca:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f023 0203 	bic.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4934      	ldr	r1, [pc, #208]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fdc:	f7fc ff86 	bl	8000eec <HAL_GetTick>
 8003fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe4:	f7fc ff82 	bl	8000eec <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e04f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 020c 	and.w	r2, r3, #12
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	429a      	cmp	r2, r3
 800400a:	d1eb      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d20c      	bcs.n	8004034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e032      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4916      	ldr	r1, [pc, #88]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	490e      	ldr	r1, [pc, #56]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004072:	f000 f821 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8004076:	4601      	mov	r1, r0
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	5cd3      	ldrb	r3, [r2, r3]
 8004086:	fa21 f303 	lsr.w	r3, r1, r3
 800408a:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fee6 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023c00 	.word	0x40023c00
 80040a8:	40023800 	.word	0x40023800
 80040ac:	08008428 	.word	0x08008428
 80040b0:	20000000 	.word	0x20000000
 80040b4:	20000004 	.word	0x20000004

080040b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	2300      	movs	r3, #0
 80040c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ce:	4b63      	ldr	r3, [pc, #396]	; (800425c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d007      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x32>
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d008      	beq.n	80040f0 <HAL_RCC_GetSysClockFreq+0x38>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 80b4 	bne.w	800424c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b5e      	ldr	r3, [pc, #376]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040e6:	60bb      	str	r3, [r7, #8]
       break;
 80040e8:	e0b3      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ea:	4b5e      	ldr	r3, [pc, #376]	; (8004264 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040ec:	60bb      	str	r3, [r7, #8]
      break;
 80040ee:	e0b0      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f0:	4b5a      	ldr	r3, [pc, #360]	; (800425c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040fa:	4b58      	ldr	r3, [pc, #352]	; (800425c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d04a      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004106:	4b55      	ldr	r3, [pc, #340]	; (800425c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	099b      	lsrs	r3, r3, #6
 800410c:	f04f 0400 	mov.w	r4, #0
 8004110:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	ea03 0501 	and.w	r5, r3, r1
 800411c:	ea04 0602 	and.w	r6, r4, r2
 8004120:	4629      	mov	r1, r5
 8004122:	4632      	mov	r2, r6
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	f04f 0400 	mov.w	r4, #0
 800412c:	0154      	lsls	r4, r2, #5
 800412e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004132:	014b      	lsls	r3, r1, #5
 8004134:	4619      	mov	r1, r3
 8004136:	4622      	mov	r2, r4
 8004138:	1b49      	subs	r1, r1, r5
 800413a:	eb62 0206 	sbc.w	r2, r2, r6
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	f04f 0400 	mov.w	r4, #0
 8004146:	0194      	lsls	r4, r2, #6
 8004148:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800414c:	018b      	lsls	r3, r1, #6
 800414e:	1a5b      	subs	r3, r3, r1
 8004150:	eb64 0402 	sbc.w	r4, r4, r2
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	00e2      	lsls	r2, r4, #3
 800415e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004162:	00d9      	lsls	r1, r3, #3
 8004164:	460b      	mov	r3, r1
 8004166:	4614      	mov	r4, r2
 8004168:	195b      	adds	r3, r3, r5
 800416a:	eb44 0406 	adc.w	r4, r4, r6
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	0262      	lsls	r2, r4, #9
 8004178:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800417c:	0259      	lsls	r1, r3, #9
 800417e:	460b      	mov	r3, r1
 8004180:	4614      	mov	r4, r2
 8004182:	4618      	mov	r0, r3
 8004184:	4621      	mov	r1, r4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f04f 0400 	mov.w	r4, #0
 800418c:	461a      	mov	r2, r3
 800418e:	4623      	mov	r3, r4
 8004190:	f7fc f822 	bl	80001d8 <__aeabi_uldivmod>
 8004194:	4603      	mov	r3, r0
 8004196:	460c      	mov	r4, r1
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e049      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419c:	4b2f      	ldr	r3, [pc, #188]	; (800425c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	099b      	lsrs	r3, r3, #6
 80041a2:	f04f 0400 	mov.w	r4, #0
 80041a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	ea03 0501 	and.w	r5, r3, r1
 80041b2:	ea04 0602 	and.w	r6, r4, r2
 80041b6:	4629      	mov	r1, r5
 80041b8:	4632      	mov	r2, r6
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	f04f 0400 	mov.w	r4, #0
 80041c2:	0154      	lsls	r4, r2, #5
 80041c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041c8:	014b      	lsls	r3, r1, #5
 80041ca:	4619      	mov	r1, r3
 80041cc:	4622      	mov	r2, r4
 80041ce:	1b49      	subs	r1, r1, r5
 80041d0:	eb62 0206 	sbc.w	r2, r2, r6
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	f04f 0400 	mov.w	r4, #0
 80041dc:	0194      	lsls	r4, r2, #6
 80041de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041e2:	018b      	lsls	r3, r1, #6
 80041e4:	1a5b      	subs	r3, r3, r1
 80041e6:	eb64 0402 	sbc.w	r4, r4, r2
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	00e2      	lsls	r2, r4, #3
 80041f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041f8:	00d9      	lsls	r1, r3, #3
 80041fa:	460b      	mov	r3, r1
 80041fc:	4614      	mov	r4, r2
 80041fe:	195b      	adds	r3, r3, r5
 8004200:	eb44 0406 	adc.w	r4, r4, r6
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	02a2      	lsls	r2, r4, #10
 800420e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004212:	0299      	lsls	r1, r3, #10
 8004214:	460b      	mov	r3, r1
 8004216:	4614      	mov	r4, r2
 8004218:	4618      	mov	r0, r3
 800421a:	4621      	mov	r1, r4
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f04f 0400 	mov.w	r4, #0
 8004222:	461a      	mov	r2, r3
 8004224:	4623      	mov	r3, r4
 8004226:	f7fb ffd7 	bl	80001d8 <__aeabi_uldivmod>
 800422a:	4603      	mov	r3, r0
 800422c:	460c      	mov	r4, r1
 800422e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	3301      	adds	r3, #1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	60bb      	str	r3, [r7, #8]
      break;
 800424a:	e002      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800424e:	60bb      	str	r3, [r7, #8]
      break;
 8004250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004252:	68bb      	ldr	r3, [r7, #8]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425c:	40023800 	.word	0x40023800
 8004260:	00f42400 	.word	0x00f42400
 8004264:	007a1200 	.word	0x007a1200

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4601      	mov	r1, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4a03      	ldr	r2, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004296:	5cd3      	ldrb	r3, [r2, r3]
 8004298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	08008438 	.word	0x08008438

080042a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042ac:	f7ff ffdc 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042b0:	4601      	mov	r1, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0b5b      	lsrs	r3, r3, #13
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4a03      	ldr	r2, [pc, #12]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042be:	5cd3      	ldrb	r3, [r2, r3]
 80042c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	08008438 	.word	0x08008438

080042d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e03f      	b.n	8004362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc fc80 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fab3 	bl	8004880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	4613      	mov	r3, r2
 8004376:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b20      	cmp	r3, #32
 8004382:	d140      	bne.n	8004406 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Receive_IT+0x26>
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e039      	b.n	8004408 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Receive_IT+0x38>
 800439e:	2302      	movs	r3, #2
 80043a0:	e032      	b.n	8004408 <HAL_UART_Receive_IT+0x9e>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2222      	movs	r2, #34	; 0x22
 80043c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0220 	orr.w	r2, r2, #32
 8004400:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10d      	bne.n	8004466 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_UART_IRQHandler+0x52>
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f98c 	bl	800477c <UART_Receive_IT>
      return;
 8004464:	e0d1      	b.n	800460a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80b0 	beq.w	80045ce <HAL_UART_IRQHandler+0x1ba>
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_UART_IRQHandler+0x70>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80a5 	beq.w	80045ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_UART_IRQHandler+0x90>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	f043 0201 	orr.w	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_UART_IRQHandler+0xb0>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	f043 0202 	orr.w	r2, r3, #2
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_UART_IRQHandler+0xd0>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	f043 0204 	orr.w	r2, r3, #4
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00f      	beq.n	800450e <HAL_UART_IRQHandler+0xfa>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_UART_IRQHandler+0xee>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	f043 0208 	orr.w	r2, r3, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d078      	beq.n	8004608 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_UART_IRQHandler+0x11c>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f926 	bl	800477c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <HAL_UART_IRQHandler+0x144>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d031      	beq.n	80045bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f86f 	bl	800463c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d123      	bne.n	80045b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800457a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	2b00      	cmp	r3, #0
 8004582:	d013      	beq.n	80045ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	4a21      	ldr	r2, [pc, #132]	; (8004610 <HAL_UART_IRQHandler+0x1fc>)
 800458a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	4618      	mov	r0, r3
 8004592:	f7fd fb5d 	bl	8001c50 <HAL_DMA_Abort_IT>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d016      	beq.n	80045ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045a6:	4610      	mov	r0, r2
 80045a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045aa:	e00e      	b.n	80045ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f83b 	bl	8004628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b2:	e00a      	b.n	80045ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f837 	bl	8004628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ba:	e006      	b.n	80045ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f833 	bl	8004628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80045c8:	e01e      	b.n	8004608 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ca:	bf00      	nop
    return;
 80045cc:	e01c      	b.n	8004608 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_UART_IRQHandler+0x1d6>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f85c 	bl	80046a0 <UART_Transmit_IT>
    return;
 80045e8:	e00f      	b.n	800460a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_UART_IRQHandler+0x1f6>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8a4 	bl	800474c <UART_EndTransmit_IT>
    return;
 8004604:	bf00      	nop
 8004606:	e000      	b.n	800460a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004608:	bf00      	nop
  }
}
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	08004679 	.word	0x08004679

08004614 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004652:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ffc8 	bl	8004628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b21      	cmp	r3, #33	; 0x21
 80046b2:	d144      	bne.n	800473e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046bc:	d11a      	bne.n	80046f4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]
 80046e6:	e00e      	b.n	8004706 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	621a      	str	r2, [r3, #32]
 80046f2:	e008      	b.n	8004706 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	1c59      	adds	r1, r3, #1
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6211      	str	r1, [r2, #32]
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29b      	uxth	r3, r3
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4619      	mov	r1, r3
 8004714:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004728:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004738:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e000      	b.n	8004740 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004762:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff ff51 	bl	8004614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b22      	cmp	r3, #34	; 0x22
 800478e:	d171      	bne.n	8004874 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004798:	d123      	bne.n	80047e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10e      	bne.n	80047c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	1c9a      	adds	r2, r3, #2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
 80047c4:	e029      	b.n	800481a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28
 80047e0:	e01b      	b.n	800481a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6858      	ldr	r0, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	1c59      	adds	r1, r3, #1
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6291      	str	r1, [r2, #40]	; 0x28
 80047fa:	b2c2      	uxtb	r2, r0
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e00c      	b.n	800481a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	1c58      	adds	r0, r3, #1
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	6288      	str	r0, [r1, #40]	; 0x28
 8004812:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4619      	mov	r1, r3
 8004828:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800482a:	2b00      	cmp	r3, #0
 800482c:	d120      	bne.n	8004870 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0220 	bic.w	r2, r2, #32
 800483c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800484c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fb fea2 	bl	80005b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	e002      	b.n	8004876 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80048c2:	f023 030c 	bic.w	r3, r3, #12
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	68f9      	ldr	r1, [r7, #12]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ee:	f040 818b 	bne.w	8004c08 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4ac1      	ldr	r2, [pc, #772]	; (8004bfc <UART_SetConfig+0x37c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d005      	beq.n	8004908 <UART_SetConfig+0x88>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4abf      	ldr	r2, [pc, #764]	; (8004c00 <UART_SetConfig+0x380>)
 8004902:	4293      	cmp	r3, r2
 8004904:	f040 80bd 	bne.w	8004a82 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7ff fcce 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 800490c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	461d      	mov	r5, r3
 8004912:	f04f 0600 	mov.w	r6, #0
 8004916:	46a8      	mov	r8, r5
 8004918:	46b1      	mov	r9, r6
 800491a:	eb18 0308 	adds.w	r3, r8, r8
 800491e:	eb49 0409 	adc.w	r4, r9, r9
 8004922:	4698      	mov	r8, r3
 8004924:	46a1      	mov	r9, r4
 8004926:	eb18 0805 	adds.w	r8, r8, r5
 800492a:	eb49 0906 	adc.w	r9, r9, r6
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800493a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800493e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004942:	4688      	mov	r8, r1
 8004944:	4691      	mov	r9, r2
 8004946:	eb18 0005 	adds.w	r0, r8, r5
 800494a:	eb49 0106 	adc.w	r1, r9, r6
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	461d      	mov	r5, r3
 8004954:	f04f 0600 	mov.w	r6, #0
 8004958:	196b      	adds	r3, r5, r5
 800495a:	eb46 0406 	adc.w	r4, r6, r6
 800495e:	461a      	mov	r2, r3
 8004960:	4623      	mov	r3, r4
 8004962:	f7fb fc39 	bl	80001d8 <__aeabi_uldivmod>
 8004966:	4603      	mov	r3, r0
 8004968:	460c      	mov	r4, r1
 800496a:	461a      	mov	r2, r3
 800496c:	4ba5      	ldr	r3, [pc, #660]	; (8004c04 <UART_SetConfig+0x384>)
 800496e:	fba3 2302 	umull	r2, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	461d      	mov	r5, r3
 800497c:	f04f 0600 	mov.w	r6, #0
 8004980:	46a9      	mov	r9, r5
 8004982:	46b2      	mov	sl, r6
 8004984:	eb19 0309 	adds.w	r3, r9, r9
 8004988:	eb4a 040a 	adc.w	r4, sl, sl
 800498c:	4699      	mov	r9, r3
 800498e:	46a2      	mov	sl, r4
 8004990:	eb19 0905 	adds.w	r9, r9, r5
 8004994:	eb4a 0a06 	adc.w	sl, sl, r6
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049ac:	4689      	mov	r9, r1
 80049ae:	4692      	mov	sl, r2
 80049b0:	eb19 0005 	adds.w	r0, r9, r5
 80049b4:	eb4a 0106 	adc.w	r1, sl, r6
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	461d      	mov	r5, r3
 80049be:	f04f 0600 	mov.w	r6, #0
 80049c2:	196b      	adds	r3, r5, r5
 80049c4:	eb46 0406 	adc.w	r4, r6, r6
 80049c8:	461a      	mov	r2, r3
 80049ca:	4623      	mov	r3, r4
 80049cc:	f7fb fc04 	bl	80001d8 <__aeabi_uldivmod>
 80049d0:	4603      	mov	r3, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b8b      	ldr	r3, [pc, #556]	; (8004c04 <UART_SetConfig+0x384>)
 80049d8:	fba3 1302 	umull	r1, r3, r3, r2
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	2164      	movs	r1, #100	; 0x64
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	3332      	adds	r3, #50	; 0x32
 80049ea:	4a86      	ldr	r2, [pc, #536]	; (8004c04 <UART_SetConfig+0x384>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049f8:	4498      	add	r8, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	461d      	mov	r5, r3
 80049fe:	f04f 0600 	mov.w	r6, #0
 8004a02:	46a9      	mov	r9, r5
 8004a04:	46b2      	mov	sl, r6
 8004a06:	eb19 0309 	adds.w	r3, r9, r9
 8004a0a:	eb4a 040a 	adc.w	r4, sl, sl
 8004a0e:	4699      	mov	r9, r3
 8004a10:	46a2      	mov	sl, r4
 8004a12:	eb19 0905 	adds.w	r9, r9, r5
 8004a16:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a2e:	4689      	mov	r9, r1
 8004a30:	4692      	mov	sl, r2
 8004a32:	eb19 0005 	adds.w	r0, r9, r5
 8004a36:	eb4a 0106 	adc.w	r1, sl, r6
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	461d      	mov	r5, r3
 8004a40:	f04f 0600 	mov.w	r6, #0
 8004a44:	196b      	adds	r3, r5, r5
 8004a46:	eb46 0406 	adc.w	r4, r6, r6
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	f7fb fbc3 	bl	80001d8 <__aeabi_uldivmod>
 8004a52:	4603      	mov	r3, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	461a      	mov	r2, r3
 8004a58:	4b6a      	ldr	r3, [pc, #424]	; (8004c04 <UART_SetConfig+0x384>)
 8004a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2164      	movs	r1, #100	; 0x64
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	3332      	adds	r3, #50	; 0x32
 8004a6c:	4a65      	ldr	r2, [pc, #404]	; (8004c04 <UART_SetConfig+0x384>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	f003 0207 	and.w	r2, r3, #7
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4442      	add	r2, r8
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	e26f      	b.n	8004f62 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a82:	f7ff fbfd 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8004a86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	461d      	mov	r5, r3
 8004a8c:	f04f 0600 	mov.w	r6, #0
 8004a90:	46a8      	mov	r8, r5
 8004a92:	46b1      	mov	r9, r6
 8004a94:	eb18 0308 	adds.w	r3, r8, r8
 8004a98:	eb49 0409 	adc.w	r4, r9, r9
 8004a9c:	4698      	mov	r8, r3
 8004a9e:	46a1      	mov	r9, r4
 8004aa0:	eb18 0805 	adds.w	r8, r8, r5
 8004aa4:	eb49 0906 	adc.w	r9, r9, r6
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ab4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ab8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004abc:	4688      	mov	r8, r1
 8004abe:	4691      	mov	r9, r2
 8004ac0:	eb18 0005 	adds.w	r0, r8, r5
 8004ac4:	eb49 0106 	adc.w	r1, r9, r6
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	461d      	mov	r5, r3
 8004ace:	f04f 0600 	mov.w	r6, #0
 8004ad2:	196b      	adds	r3, r5, r5
 8004ad4:	eb46 0406 	adc.w	r4, r6, r6
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4623      	mov	r3, r4
 8004adc:	f7fb fb7c 	bl	80001d8 <__aeabi_uldivmod>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <UART_SetConfig+0x384>)
 8004ae8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	461d      	mov	r5, r3
 8004af6:	f04f 0600 	mov.w	r6, #0
 8004afa:	46a9      	mov	r9, r5
 8004afc:	46b2      	mov	sl, r6
 8004afe:	eb19 0309 	adds.w	r3, r9, r9
 8004b02:	eb4a 040a 	adc.w	r4, sl, sl
 8004b06:	4699      	mov	r9, r3
 8004b08:	46a2      	mov	sl, r4
 8004b0a:	eb19 0905 	adds.w	r9, r9, r5
 8004b0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b26:	4689      	mov	r9, r1
 8004b28:	4692      	mov	sl, r2
 8004b2a:	eb19 0005 	adds.w	r0, r9, r5
 8004b2e:	eb4a 0106 	adc.w	r1, sl, r6
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	461d      	mov	r5, r3
 8004b38:	f04f 0600 	mov.w	r6, #0
 8004b3c:	196b      	adds	r3, r5, r5
 8004b3e:	eb46 0406 	adc.w	r4, r6, r6
 8004b42:	461a      	mov	r2, r3
 8004b44:	4623      	mov	r3, r4
 8004b46:	f7fb fb47 	bl	80001d8 <__aeabi_uldivmod>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <UART_SetConfig+0x384>)
 8004b52:	fba3 1302 	umull	r1, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2164      	movs	r1, #100	; 0x64
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <UART_SetConfig+0x384>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b72:	4498      	add	r8, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	461d      	mov	r5, r3
 8004b78:	f04f 0600 	mov.w	r6, #0
 8004b7c:	46a9      	mov	r9, r5
 8004b7e:	46b2      	mov	sl, r6
 8004b80:	eb19 0309 	adds.w	r3, r9, r9
 8004b84:	eb4a 040a 	adc.w	r4, sl, sl
 8004b88:	4699      	mov	r9, r3
 8004b8a:	46a2      	mov	sl, r4
 8004b8c:	eb19 0905 	adds.w	r9, r9, r5
 8004b90:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ba4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ba8:	4689      	mov	r9, r1
 8004baa:	4692      	mov	sl, r2
 8004bac:	eb19 0005 	adds.w	r0, r9, r5
 8004bb0:	eb4a 0106 	adc.w	r1, sl, r6
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	461d      	mov	r5, r3
 8004bba:	f04f 0600 	mov.w	r6, #0
 8004bbe:	196b      	adds	r3, r5, r5
 8004bc0:	eb46 0406 	adc.w	r4, r6, r6
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	f7fb fb06 	bl	80001d8 <__aeabi_uldivmod>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <UART_SetConfig+0x384>)
 8004bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	2164      	movs	r1, #100	; 0x64
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	3332      	adds	r3, #50	; 0x32
 8004be6:	4a07      	ldr	r2, [pc, #28]	; (8004c04 <UART_SetConfig+0x384>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	f003 0207 	and.w	r2, r3, #7
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4442      	add	r2, r8
 8004bf8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004bfa:	e1b2      	b.n	8004f62 <UART_SetConfig+0x6e2>
 8004bfc:	40011000 	.word	0x40011000
 8004c00:	40011400 	.word	0x40011400
 8004c04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4ad7      	ldr	r2, [pc, #860]	; (8004f6c <UART_SetConfig+0x6ec>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d005      	beq.n	8004c1e <UART_SetConfig+0x39e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4ad6      	ldr	r2, [pc, #856]	; (8004f70 <UART_SetConfig+0x6f0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	f040 80d1 	bne.w	8004dc0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c1e:	f7ff fb43 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 8004c22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	469a      	mov	sl, r3
 8004c28:	f04f 0b00 	mov.w	fp, #0
 8004c2c:	46d0      	mov	r8, sl
 8004c2e:	46d9      	mov	r9, fp
 8004c30:	eb18 0308 	adds.w	r3, r8, r8
 8004c34:	eb49 0409 	adc.w	r4, r9, r9
 8004c38:	4698      	mov	r8, r3
 8004c3a:	46a1      	mov	r9, r4
 8004c3c:	eb18 080a 	adds.w	r8, r8, sl
 8004c40:	eb49 090b 	adc.w	r9, r9, fp
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c58:	4688      	mov	r8, r1
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	eb1a 0508 	adds.w	r5, sl, r8
 8004c60:	eb4b 0609 	adc.w	r6, fp, r9
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	f04f 0400 	mov.w	r4, #0
 8004c76:	0094      	lsls	r4, r2, #2
 8004c78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c7c:	008b      	lsls	r3, r1, #2
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4623      	mov	r3, r4
 8004c82:	4628      	mov	r0, r5
 8004c84:	4631      	mov	r1, r6
 8004c86:	f7fb faa7 	bl	80001d8 <__aeabi_uldivmod>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4bb8      	ldr	r3, [pc, #736]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004c92:	fba3 2302 	umull	r2, r3, r3, r2
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	469b      	mov	fp, r3
 8004ca0:	f04f 0c00 	mov.w	ip, #0
 8004ca4:	46d9      	mov	r9, fp
 8004ca6:	46e2      	mov	sl, ip
 8004ca8:	eb19 0309 	adds.w	r3, r9, r9
 8004cac:	eb4a 040a 	adc.w	r4, sl, sl
 8004cb0:	4699      	mov	r9, r3
 8004cb2:	46a2      	mov	sl, r4
 8004cb4:	eb19 090b 	adds.w	r9, r9, fp
 8004cb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ccc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cd0:	4689      	mov	r9, r1
 8004cd2:	4692      	mov	sl, r2
 8004cd4:	eb1b 0509 	adds.w	r5, fp, r9
 8004cd8:	eb4c 060a 	adc.w	r6, ip, sl
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	f04f 0400 	mov.w	r4, #0
 8004cee:	0094      	lsls	r4, r2, #2
 8004cf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cf4:	008b      	lsls	r3, r1, #2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	f7fb fa6b 	bl	80001d8 <__aeabi_uldivmod>
 8004d02:	4603      	mov	r3, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	461a      	mov	r2, r3
 8004d08:	4b9a      	ldr	r3, [pc, #616]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2164      	movs	r1, #100	; 0x64
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	3332      	adds	r3, #50	; 0x32
 8004d1c:	4a95      	ldr	r2, [pc, #596]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d28:	4498      	add	r8, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	469b      	mov	fp, r3
 8004d2e:	f04f 0c00 	mov.w	ip, #0
 8004d32:	46d9      	mov	r9, fp
 8004d34:	46e2      	mov	sl, ip
 8004d36:	eb19 0309 	adds.w	r3, r9, r9
 8004d3a:	eb4a 040a 	adc.w	r4, sl, sl
 8004d3e:	4699      	mov	r9, r3
 8004d40:	46a2      	mov	sl, r4
 8004d42:	eb19 090b 	adds.w	r9, r9, fp
 8004d46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d5e:	4689      	mov	r9, r1
 8004d60:	4692      	mov	sl, r2
 8004d62:	eb1b 0509 	adds.w	r5, fp, r9
 8004d66:	eb4c 060a 	adc.w	r6, ip, sl
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	f04f 0400 	mov.w	r4, #0
 8004d7c:	0094      	lsls	r4, r2, #2
 8004d7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d82:	008b      	lsls	r3, r1, #2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	f7fb fa24 	bl	80001d8 <__aeabi_uldivmod>
 8004d90:	4603      	mov	r3, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b77      	ldr	r3, [pc, #476]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004d98:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	2164      	movs	r1, #100	; 0x64
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	3332      	adds	r3, #50	; 0x32
 8004daa:	4a72      	ldr	r2, [pc, #456]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	f003 020f 	and.w	r2, r3, #15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4442      	add	r2, r8
 8004dbc:	609a      	str	r2, [r3, #8]
 8004dbe:	e0d0      	b.n	8004f62 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7ff fa5e 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	469a      	mov	sl, r3
 8004dca:	f04f 0b00 	mov.w	fp, #0
 8004dce:	46d0      	mov	r8, sl
 8004dd0:	46d9      	mov	r9, fp
 8004dd2:	eb18 0308 	adds.w	r3, r8, r8
 8004dd6:	eb49 0409 	adc.w	r4, r9, r9
 8004dda:	4698      	mov	r8, r3
 8004ddc:	46a1      	mov	r9, r4
 8004dde:	eb18 080a 	adds.w	r8, r8, sl
 8004de2:	eb49 090b 	adc.w	r9, r9, fp
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004df2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004df6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dfa:	4688      	mov	r8, r1
 8004dfc:	4691      	mov	r9, r2
 8004dfe:	eb1a 0508 	adds.w	r5, sl, r8
 8004e02:	eb4b 0609 	adc.w	r6, fp, r9
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	f04f 0400 	mov.w	r4, #0
 8004e18:	0094      	lsls	r4, r2, #2
 8004e1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e1e:	008b      	lsls	r3, r1, #2
 8004e20:	461a      	mov	r2, r3
 8004e22:	4623      	mov	r3, r4
 8004e24:	4628      	mov	r0, r5
 8004e26:	4631      	mov	r1, r6
 8004e28:	f7fb f9d6 	bl	80001d8 <__aeabi_uldivmod>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b50      	ldr	r3, [pc, #320]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004e34:	fba3 2302 	umull	r2, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	469b      	mov	fp, r3
 8004e42:	f04f 0c00 	mov.w	ip, #0
 8004e46:	46d9      	mov	r9, fp
 8004e48:	46e2      	mov	sl, ip
 8004e4a:	eb19 0309 	adds.w	r3, r9, r9
 8004e4e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e52:	4699      	mov	r9, r3
 8004e54:	46a2      	mov	sl, r4
 8004e56:	eb19 090b 	adds.w	r9, r9, fp
 8004e5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e5e:	f04f 0100 	mov.w	r1, #0
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e72:	4689      	mov	r9, r1
 8004e74:	4692      	mov	sl, r2
 8004e76:	eb1b 0509 	adds.w	r5, fp, r9
 8004e7a:	eb4c 060a 	adc.w	r6, ip, sl
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4619      	mov	r1, r3
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	f04f 0400 	mov.w	r4, #0
 8004e90:	0094      	lsls	r4, r2, #2
 8004e92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e96:	008b      	lsls	r3, r1, #2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	f7fb f99a 	bl	80001d8 <__aeabi_uldivmod>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4b32      	ldr	r3, [pc, #200]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004eac:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	2164      	movs	r1, #100	; 0x64
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	3332      	adds	r3, #50	; 0x32
 8004ebe:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eca:	4498      	add	r8, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	469b      	mov	fp, r3
 8004ed0:	f04f 0c00 	mov.w	ip, #0
 8004ed4:	46d9      	mov	r9, fp
 8004ed6:	46e2      	mov	sl, ip
 8004ed8:	eb19 0309 	adds.w	r3, r9, r9
 8004edc:	eb4a 040a 	adc.w	r4, sl, sl
 8004ee0:	4699      	mov	r9, r3
 8004ee2:	46a2      	mov	sl, r4
 8004ee4:	eb19 090b 	adds.w	r9, r9, fp
 8004ee8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004efc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f00:	4689      	mov	r9, r1
 8004f02:	4692      	mov	sl, r2
 8004f04:	eb1b 0509 	adds.w	r5, fp, r9
 8004f08:	eb4c 060a 	adc.w	r6, ip, sl
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4619      	mov	r1, r3
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	f04f 0400 	mov.w	r4, #0
 8004f1e:	0094      	lsls	r4, r2, #2
 8004f20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f24:	008b      	lsls	r3, r1, #2
 8004f26:	461a      	mov	r2, r3
 8004f28:	4623      	mov	r3, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	f7fb f953 	bl	80001d8 <__aeabi_uldivmod>
 8004f32:	4603      	mov	r3, r0
 8004f34:	460c      	mov	r4, r1
 8004f36:	461a      	mov	r2, r3
 8004f38:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	2164      	movs	r1, #100	; 0x64
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	3332      	adds	r3, #50	; 0x32
 8004f4c:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	f003 020f 	and.w	r2, r3, #15
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4442      	add	r2, r8
 8004f5e:	609a      	str	r2, [r3, #8]
}
 8004f60:	e7ff      	b.n	8004f62 <UART_SetConfig+0x6e2>
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6c:	40011000 	.word	0x40011000
 8004f70:	40011400 	.word	0x40011400
 8004f74:	51eb851f 	.word	0x51eb851f

08004f78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f78:	b084      	sub	sp, #16
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	f107 001c 	add.w	r0, r7, #28
 8004f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d122      	bne.n	8004fd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d105      	bne.n	8004fca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f94a 	bl	8005264 <USB_CoreReset>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	e01a      	b.n	800500c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f93e 	bl	8005264 <USB_CoreReset>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ffe:	e005      	b.n	800500c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	2b01      	cmp	r3, #1
 8005010:	d10b      	bne.n	800502a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f043 0206 	orr.w	r2, r3, #6
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f043 0220 	orr.w	r2, r3, #32
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005036:	b004      	add	sp, #16
 8005038:	4770      	bx	lr

0800503a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f043 0201 	orr.w	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f023 0201 	bic.w	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d106      	bne.n	80050aa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60da      	str	r2, [r3, #12]
 80050a8:	e00b      	b.n	80050c2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	60da      	str	r2, [r3, #12]
 80050bc:	e001      	b.n	80050c2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e003      	b.n	80050ca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80050c2:	2032      	movs	r0, #50	; 0x32
 80050c4:	f7fb ff1e 	bl	8000f04 <HAL_Delay>

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	019b      	lsls	r3, r3, #6
 80050e6:	f043 0220 	orr.w	r2, r3, #32
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3301      	adds	r3, #1
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <USB_FlushTxFifo+0x48>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e006      	b.n	800510e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b20      	cmp	r3, #32
 800510a:	d0f0      	beq.n	80050ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	00030d40 	.word	0x00030d40

08005120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2210      	movs	r2, #16
 8005130:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3301      	adds	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4a09      	ldr	r2, [pc, #36]	; (8005160 <USB_FlushRxFifo+0x40>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d901      	bls.n	8005144 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e006      	b.n	8005152 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b10      	cmp	r3, #16
 800514e:	d0f0      	beq.n	8005132 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	00030d40 	.word	0x00030d40

08005164 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4611      	mov	r1, r2
 8005170:	461a      	mov	r2, r3
 8005172:	460b      	mov	r3, r1
 8005174:	71fb      	strb	r3, [r7, #7]
 8005176:	4613      	mov	r3, r2
 8005178:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005182:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d11a      	bne.n	80051c0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800518a:	88bb      	ldrh	r3, [r7, #4]
 800518c:	3303      	adds	r3, #3
 800518e:	089b      	lsrs	r3, r3, #2
 8005190:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005192:	2300      	movs	r3, #0
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	e00f      	b.n	80051b8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	031a      	lsls	r2, r3, #12
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a4:	461a      	mov	r2, r3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	3304      	adds	r3, #4
 80051b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	3301      	adds	r3, #1
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d3eb      	bcc.n	8005198 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3724      	adds	r7, #36	; 0x24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b089      	sub	sp, #36	; 0x24
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	4613      	mov	r3, r2
 80051da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	3303      	adds	r3, #3
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	e00b      	b.n	800520a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	601a      	str	r2, [r3, #0]
    pDest++;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3304      	adds	r3, #4
 8005202:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	3301      	adds	r3, #1
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	429a      	cmp	r2, r3
 8005210:	d3ef      	bcc.n	80051f2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005212:	69fb      	ldr	r3, [r7, #28]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3724      	adds	r7, #36	; 0x24
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0301 	and.w	r3, r3, #1
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3301      	adds	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <USB_CoreReset+0x64>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e01b      	b.n	80052ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	daf2      	bge.n	8005270 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3301      	adds	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <USB_CoreReset+0x64>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e006      	b.n	80052ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d0f0      	beq.n	800529a <USB_CoreReset+0x36>

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	00030d40 	.word	0x00030d40

080052cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052cc:	b084      	sub	sp, #16
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	f107 001c 	add.w	r0, r7, #28
 80052da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052e8:	461a      	mov	r2, r3
 80052ea:	2300      	movs	r3, #0
 80052ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b01      	cmp	r3, #1
 8005322:	d10a      	bne.n	800533a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e014      	b.n	8005364 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005348:	f023 0304 	bic.w	r3, r3, #4
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e009      	b.n	8005364 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800535e:	f023 0304 	bic.w	r3, r3, #4
 8005362:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005364:	2110      	movs	r1, #16
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff feb4 	bl	80050d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fed7 	bl	8005120 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e015      	b.n	80053a4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	461a      	mov	r2, r3
 8005386:	f04f 33ff 	mov.w	r3, #4294967295
 800538a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	461a      	mov	r2, r3
 800539a:	2300      	movs	r3, #0
 800539c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d3e5      	bcc.n	8005378 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80053ac:	2101      	movs	r1, #1
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f8ac 	bl	800550c <USB_DriveVbus>

  HAL_Delay(200U);
 80053b4:	20c8      	movs	r0, #200	; 0xc8
 80053b6:	f7fb fda5 	bl	8000f04 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295
 80053c6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a14      	ldr	r2, [pc, #80]	; (8005430 <USB_HostInit+0x164>)
 80053e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a13      	ldr	r2, [pc, #76]	; (8005434 <USB_HostInit+0x168>)
 80053e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053ea:	e009      	b.n	8005400 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a10      	ldr	r2, [pc, #64]	; (8005438 <USB_HostInit+0x16c>)
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a10      	ldr	r2, [pc, #64]	; (800543c <USB_HostInit+0x170>)
 80053fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	2b00      	cmp	r3, #0
 8005404:	d105      	bne.n	8005412 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f043 0210 	orr.w	r2, r3, #16
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <USB_HostInit+0x174>)
 8005418:	4313      	orrs	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800542a:	b004      	add	sp, #16
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	01000200 	.word	0x01000200
 8005434:	00e00300 	.word	0x00e00300
 8005438:	00600080 	.word	0x00600080
 800543c:	004000e0 	.word	0x004000e0
 8005440:	a3200008 	.word	0xa3200008

08005444 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	68f9      	ldr	r1, [r7, #12]
 8005478:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d107      	bne.n	8005496 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800548c:	461a      	mov	r2, r3
 800548e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005492:	6053      	str	r3, [r2, #4]
 8005494:	e009      	b.n	80054aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d106      	bne.n	80054aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a2:	461a      	mov	r2, r3
 80054a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80054a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054e8:	2064      	movs	r0, #100	; 0x64
 80054ea:	f7fb fd0b 	bl	8000f04 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054fc:	200a      	movs	r0, #10
 80054fe:	f7fb fd01 	bl	8000f04 <HAL_Delay>

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005530:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <USB_DriveVbus+0x44>
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d106      	bne.n	8005550 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800554a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800554e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	d109      	bne.n	8005570 <USB_DriveVbus+0x64>
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800556a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800556e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	0c5b      	lsrs	r3, r3, #17
 800559c:	f003 0303 	and.w	r3, r3, #3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	b29b      	uxth	r3, r3
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	461a      	mov	r2, r3
 80055de:	4603      	mov	r3, r0
 80055e0:	70fb      	strb	r3, [r7, #3]
 80055e2:	460b      	mov	r3, r1
 80055e4:	70bb      	strb	r3, [r7, #2]
 80055e6:	4613      	mov	r3, r2
 80055e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fe:	461a      	mov	r2, r3
 8005600:	f04f 33ff 	mov.w	r3, #4294967295
 8005604:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005606:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800560a:	2b03      	cmp	r3, #3
 800560c:	d87e      	bhi.n	800570c <USB_HC_Init+0x13c>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <USB_HC_Init+0x44>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005625 	.word	0x08005625
 8005618:	080056cf 	.word	0x080056cf
 800561c:	08005625 	.word	0x08005625
 8005620:	08005691 	.word	0x08005691
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4413      	add	r3, r2
 800562c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005630:	461a      	mov	r2, r3
 8005632:	f240 439d 	movw	r3, #1181	; 0x49d
 8005636:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005638:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800563c:	2b00      	cmp	r3, #0
 800563e:	da10      	bge.n	8005662 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	78fa      	ldrb	r2, [r7, #3]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	440a      	add	r2, r1
 8005656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005660:	e057      	b.n	8005712 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d051      	beq.n	8005712 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	440a      	add	r2, r1
 8005684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005688:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800568c:	60d3      	str	r3, [r2, #12]
      break;
 800568e:	e040      	b.n	8005712 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569c:	461a      	mov	r2, r3
 800569e:	f240 639d 	movw	r3, #1693	; 0x69d
 80056a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	da34      	bge.n	8005716 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056cc:	e023      	b.n	8005716 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056da:	461a      	mov	r2, r3
 80056dc:	f240 2325 	movw	r3, #549	; 0x225
 80056e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da17      	bge.n	800571a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005704:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005708:	60d3      	str	r3, [r2, #12]
      }
      break;
 800570a:	e006      	b.n	800571a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	75fb      	strb	r3, [r7, #23]
      break;
 8005710:	e004      	b.n	800571c <USB_HC_Init+0x14c>
      break;
 8005712:	bf00      	nop
 8005714:	e002      	b.n	800571c <USB_HC_Init+0x14c>
      break;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <USB_HC_Init+0x14c>
      break;
 800571a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f303 	lsl.w	r3, r1, r3
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005736:	4313      	orrs	r3, r2
 8005738:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005746:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800574a:	2b00      	cmp	r3, #0
 800574c:	da03      	bge.n	8005756 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800574e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	e001      	b.n	800575a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800575a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d103      	bne.n	800576a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e001      	b.n	800576e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800576e:	787b      	ldrb	r3, [r7, #1]
 8005770:	059b      	lsls	r3, r3, #22
 8005772:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005776:	78bb      	ldrb	r3, [r7, #2]
 8005778:	02db      	lsls	r3, r3, #11
 800577a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800577e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005780:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005784:	049b      	lsls	r3, r3, #18
 8005786:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800578a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800578c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800578e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005792:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	0159      	lsls	r1, r3, #5
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	440b      	add	r3, r1
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057aa:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80057ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d10f      	bne.n	80057d4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	78fa      	ldrb	r2, [r7, #3]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop

080057e4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08c      	sub	sp, #48	; 0x30
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	4613      	mov	r3, r2
 80057f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80057fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005800:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d028      	beq.n	8005860 <USB_HC_StartXfer+0x7c>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	791b      	ldrb	r3, [r3, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d124      	bne.n	8005860 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <USB_HC_StartXfer+0x50>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	795b      	ldrb	r3, [r3, #5]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d107      	bne.n	8005834 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	4619      	mov	r1, r3
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fa30 	bl	8005c90 <USB_DoPing>
      return HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	e114      	b.n	8005a5e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d112      	bne.n	8005860 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	4413      	add	r3, r2
 8005842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	440a      	add	r2, r1
 8005850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005854:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005858:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d018      	beq.n	800589a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	8912      	ldrh	r2, [r2, #8]
 8005870:	4413      	add	r3, r2
 8005872:	3b01      	subs	r3, #1
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	8912      	ldrh	r2, [r2, #8]
 8005878:	fbb3 f3f2 	udiv	r3, r3, r2
 800587c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800587e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005880:	8b7b      	ldrh	r3, [r7, #26]
 8005882:	429a      	cmp	r2, r3
 8005884:	d90b      	bls.n	800589e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005886:	8b7b      	ldrh	r3, [r7, #26]
 8005888:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800588a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	8912      	ldrh	r2, [r2, #8]
 8005890:	fb02 f203 	mul.w	r2, r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	611a      	str	r2, [r3, #16]
 8005898:	e001      	b.n	800589e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800589a:	2301      	movs	r3, #1
 800589c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	78db      	ldrb	r3, [r3, #3]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d006      	beq.n	80058b4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80058a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	8912      	ldrh	r2, [r2, #8]
 80058ac:	fb02 f203 	mul.w	r2, r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058be:	04d9      	lsls	r1, r3, #19
 80058c0:	4b69      	ldr	r3, [pc, #420]	; (8005a68 <USB_HC_StartXfer+0x284>)
 80058c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80058c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	7a9b      	ldrb	r3, [r3, #10]
 80058ca:	075b      	lsls	r3, r3, #29
 80058cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80058d0:	69f9      	ldr	r1, [r7, #28]
 80058d2:	0148      	lsls	r0, r1, #5
 80058d4:	6a39      	ldr	r1, [r7, #32]
 80058d6:	4401      	add	r1, r0
 80058d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80058de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	68d9      	ldr	r1, [r3, #12]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	460a      	mov	r2, r1
 80058f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	6a3a      	ldr	r2, [r7, #32]
 8005926:	440a      	add	r2, r1
 8005928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800592c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005930:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	7e7b      	ldrb	r3, [r7, #25]
 8005942:	075b      	lsls	r3, r3, #29
 8005944:	69f9      	ldr	r1, [r7, #28]
 8005946:	0148      	lsls	r0, r1, #5
 8005948:	6a39      	ldr	r1, [r7, #32]
 800594a:	4401      	add	r1, r0
 800594c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	4413      	add	r3, r2
 800595c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a42      	ldr	r2, [pc, #264]	; (8005a6c <USB_HC_StartXfer+0x288>)
 8005964:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005966:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <USB_HC_StartXfer+0x288>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800596e:	4a3f      	ldr	r2, [pc, #252]	; (8005a6c <USB_HC_StartXfer+0x288>)
 8005970:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	78db      	ldrb	r3, [r3, #3]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d006      	beq.n	8005988 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800597a:	4b3c      	ldr	r3, [pc, #240]	; (8005a6c <USB_HC_StartXfer+0x288>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005982:	4a3a      	ldr	r2, [pc, #232]	; (8005a6c <USB_HC_StartXfer+0x288>)
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e005      	b.n	8005994 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005988:	4b38      	ldr	r3, [pc, #224]	; (8005a6c <USB_HC_StartXfer+0x288>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005990:	4a36      	ldr	r2, [pc, #216]	; (8005a6c <USB_HC_StartXfer+0x288>)
 8005992:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <USB_HC_StartXfer+0x288>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800599c:	4a33      	ldr	r2, [pc, #204]	; (8005a6c <USB_HC_StartXfer+0x288>)
 800599e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	461a      	mov	r2, r3
 80059ae:	4b2f      	ldr	r3, [pc, #188]	; (8005a6c <USB_HC_StartXfer+0x288>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e04f      	b.n	8005a5e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	78db      	ldrb	r3, [r3, #3]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d14a      	bne.n	8005a5c <USB_HC_StartXfer+0x278>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d046      	beq.n	8005a5c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	79db      	ldrb	r3, [r3, #7]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d830      	bhi.n	8005a38 <USB_HC_StartXfer+0x254>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <USB_HC_StartXfer+0x1f8>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	080059ed 	.word	0x080059ed
 80059e0:	08005a11 	.word	0x08005a11
 80059e4:	080059ed 	.word	0x080059ed
 80059e8:	08005a11 	.word	0x08005a11
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	3303      	adds	r3, #3
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80059f6:	8afa      	ldrh	r2, [r7, #22]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d91c      	bls.n	8005a3c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f043 0220 	orr.w	r2, r3, #32
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a0e:	e015      	b.n	8005a3c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	3303      	adds	r3, #3
 8005a16:	089b      	lsrs	r3, r3, #2
 8005a18:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a1a:	8afa      	ldrh	r2, [r7, #22]
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d90a      	bls.n	8005a40 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a36:	e003      	b.n	8005a40 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a38:	bf00      	nop
 8005a3a:	e002      	b.n	8005a42 <USB_HC_StartXfer+0x25e>
        break;
 8005a3c:	bf00      	nop
 8005a3e:	e000      	b.n	8005a42 <USB_HC_StartXfer+0x25e>
        break;
 8005a40:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	68d9      	ldr	r1, [r3, #12]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	785a      	ldrb	r2, [r3, #1]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	b298      	uxth	r0, r3
 8005a50:	2300      	movs	r3, #0
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	4603      	mov	r3, r0
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff fb84 	bl	8005164 <USB_WritePacket>
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	1ff80000 	.word	0x1ff80000
 8005a6c:	200000b8 	.word	0x200000b8

08005a70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	b29b      	uxth	r3, r3
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b087      	sub	sp, #28
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005aa2:	78fb      	ldrb	r3, [r7, #3]
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	0c9b      	lsrs	r3, r3, #18
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <USB_HC_Halt+0x3a>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d16c      	bne.n	8005ba6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aea:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d143      	bne.n	8005b80 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b56:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b64:	d81d      	bhi.n	8005ba2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b7c:	d0ec      	beq.n	8005b58 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b7e:	e080      	b.n	8005c82 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b9e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ba0:	e06f      	b.n	8005c82 <USB_HC_Halt+0x1f0>
          break;
 8005ba2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ba4:	e06d      	b.n	8005c82 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d143      	bne.n	8005c5e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bf4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c34:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c42:	d81d      	bhi.n	8005c80 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c5a:	d0ec      	beq.n	8005c36 <USB_HC_Halt+0x1a4>
 8005c5c:	e011      	b.n	8005c82 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e000      	b.n	8005c82 <USB_HC_Halt+0x1f0>
          break;
 8005c80:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	04da      	lsls	r2, r3, #19
 8005cac:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <USB_DoPing+0x74>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cc0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cd8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ce0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	1ff80000 	.word	0x1ff80000

08005d08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff f99f 	bl	800505c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005d1e:	2110      	movs	r1, #16
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff f9d7 	bl	80050d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff f9fa 	bl	8005120 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	e01f      	b.n	8005d72 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d58:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	461a      	mov	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b0f      	cmp	r3, #15
 8005d76:	d9dc      	bls.n	8005d32 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	e034      	b.n	8005de8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d94:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005da4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db2:	461a      	mov	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc4:	d80c      	bhi.n	8005de0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ddc:	d0ec      	beq.n	8005db8 <USB_StopHost+0xb0>
 8005dde:	e000      	b.n	8005de2 <USB_StopHost+0xda>
        break;
 8005de0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	3301      	adds	r3, #1
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b0f      	cmp	r3, #15
 8005dec:	d9c7      	bls.n	8005d7e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df4:	461a      	mov	r2, r3
 8005df6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005e02:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff f918 	bl	800503a <USB_EnableGlobalInt>

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e14:	b590      	push	{r4, r7, lr}
 8005e16:	b089      	sub	sp, #36	; 0x24
 8005e18:	af04      	add	r7, sp, #16
 8005e1a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	2202      	movs	r2, #2
 8005e20:	2102      	movs	r1, #2
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fc68 	bl	80066f8 <USBH_FindInterface>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2bff      	cmp	r3, #255	; 0xff
 8005e30:	d002      	beq.n	8005e38 <USBH_CDC_InterfaceInit+0x24>
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d901      	bls.n	8005e3c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e13d      	b.n	80060b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fc3d 	bl	80066c0 <USBH_SelectInterface>
 8005e46:	4603      	mov	r3, r0
 8005e48:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e4a:	7bbb      	ldrb	r3, [r7, #14]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e50:	2302      	movs	r3, #2
 8005e52:	e131      	b.n	80060b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e5a:	2050      	movs	r0, #80	; 0x50
 8005e5c:	f002 fa04 	bl	8008268 <malloc>
 8005e60:	4603      	mov	r3, r0
 8005e62:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e74:	2302      	movs	r3, #2
 8005e76:	e11f      	b.n	80060b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e78:	2250      	movs	r2, #80	; 0x50
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	68b8      	ldr	r0, [r7, #8]
 8005e7e:	f002 fa03 	bl	8008288 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	211a      	movs	r1, #26
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b25b      	sxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	da15      	bge.n	8005ec6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	211a      	movs	r1, #26
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	211a      	movs	r1, #26
 8005eb6:	fb01 f303 	mul.w	r3, r1, r3
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ec0:	881a      	ldrh	r2, [r3, #0]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	785b      	ldrb	r3, [r3, #1]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 fe36 	bl	8007b3e <USBH_AllocPipe>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	7819      	ldrb	r1, [r3, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	7858      	ldrb	r0, [r3, #1]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	8952      	ldrh	r2, [r2, #10]
 8005ef2:	9202      	str	r2, [sp, #8]
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	9201      	str	r2, [sp, #4]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	4623      	mov	r3, r4
 8005efc:	4602      	mov	r2, r0
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 fdee 	bl	8007ae0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f002 f8fb 	bl	8008108 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f12:	2300      	movs	r3, #0
 8005f14:	2200      	movs	r2, #0
 8005f16:	210a      	movs	r1, #10
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fbed 	bl	80066f8 <USBH_FindInterface>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2bff      	cmp	r3, #255	; 0xff
 8005f26:	d002      	beq.n	8005f2e <USBH_CDC_InterfaceInit+0x11a>
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d901      	bls.n	8005f32 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e0c2      	b.n	80060b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	211a      	movs	r1, #26
 8005f38:	fb01 f303 	mul.w	r3, r1, r3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da16      	bge.n	8005f78 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	211a      	movs	r1, #26
 8005f50:	fb01 f303 	mul.w	r3, r1, r3
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f5a:	781a      	ldrb	r2, [r3, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	211a      	movs	r1, #26
 8005f66:	fb01 f303 	mul.w	r3, r1, r3
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f70:	881a      	ldrh	r2, [r3, #0]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	835a      	strh	r2, [r3, #26]
 8005f76:	e015      	b.n	8005fa4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	211a      	movs	r1, #26
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	211a      	movs	r1, #26
 8005f94:	fb01 f303 	mul.w	r3, r1, r3
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f9e:	881a      	ldrh	r2, [r3, #0]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	211a      	movs	r1, #26
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	b25b      	sxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da16      	bge.n	8005fea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	211a      	movs	r1, #26
 8005fc2:	fb01 f303 	mul.w	r3, r1, r3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	211a      	movs	r1, #26
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fe2:	881a      	ldrh	r2, [r3, #0]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	835a      	strh	r2, [r3, #26]
 8005fe8:	e015      	b.n	8006016 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	211a      	movs	r1, #26
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	211a      	movs	r1, #26
 8006006:	fb01 f303 	mul.w	r3, r1, r3
 800600a:	4413      	add	r3, r2
 800600c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006010:	881a      	ldrh	r2, [r3, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	7b9b      	ldrb	r3, [r3, #14]
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 fd8e 	bl	8007b3e <USBH_AllocPipe>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	7bdb      	ldrb	r3, [r3, #15]
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 fd84 	bl	8007b3e <USBH_AllocPipe>
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	7b59      	ldrb	r1, [r3, #13]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	7b98      	ldrb	r0, [r3, #14]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	8b12      	ldrh	r2, [r2, #24]
 8006056:	9202      	str	r2, [sp, #8]
 8006058:	2202      	movs	r2, #2
 800605a:	9201      	str	r2, [sp, #4]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	4623      	mov	r3, r4
 8006060:	4602      	mov	r2, r0
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f001 fd3c 	bl	8007ae0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	7b19      	ldrb	r1, [r3, #12]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	7bd8      	ldrb	r0, [r3, #15]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	8b52      	ldrh	r2, [r2, #26]
 8006080:	9202      	str	r2, [sp, #8]
 8006082:	2202      	movs	r2, #2
 8006084:	9201      	str	r2, [sp, #4]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	4623      	mov	r3, r4
 800608a:	4602      	mov	r2, r0
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 fd27 	bl	8007ae0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	7b5b      	ldrb	r3, [r3, #13]
 800609e:	2200      	movs	r2, #0
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f002 f830 	bl	8008108 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	7b1b      	ldrb	r3, [r3, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f002 f829 	bl	8008108 <USBH_LL_SetToggle>

  return USBH_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd90      	pop	{r4, r7, pc}

080060c0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00e      	beq.n	80060f8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fd1c 	bl	8007b1e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fd47 	bl	8007b80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	7b1b      	ldrb	r3, [r3, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00e      	beq.n	800611e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	7b1b      	ldrb	r3, [r3, #12]
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 fd09 	bl	8007b1e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	7b1b      	ldrb	r3, [r3, #12]
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fd34 	bl	8007b80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	7b5b      	ldrb	r3, [r3, #13]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00e      	beq.n	8006144 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	7b5b      	ldrb	r3, [r3, #13]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 fcf6 	bl	8007b1e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	7b5b      	ldrb	r3, [r3, #13]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fd21 	bl	8007b80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	4618      	mov	r0, r3
 800615a:	f002 f88d 	bl	8008278 <free>
    phost->pActiveClass->pData = 0U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006164:	2200      	movs	r2, #0
 8006166:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3340      	adds	r3, #64	; 0x40
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f8b1 	bl	80062f2 <GetLineCoding>
 8006190:	4603      	mov	r3, r0
 8006192:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d105      	bne.n	80061a6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061a0:	2102      	movs	r1, #2
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061a6:	7afb      	ldrb	r3, [r7, #11]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d877      	bhi.n	80062c4 <USBH_CDC_Process+0x114>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <USBH_CDC_Process+0x2c>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	080061f1 	.word	0x080061f1
 80061e0:	080061f7 	.word	0x080061f7
 80061e4:	08006227 	.word	0x08006227
 80061e8:	0800629b 	.word	0x0800629b
 80061ec:	080062a9 	.word	0x080062a9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	73fb      	strb	r3, [r7, #15]
      break;
 80061f4:	e06d      	b.n	80062d2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f897 	bl	8006330 <SetLineCoding>
 8006202:	4603      	mov	r3, r0
 8006204:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006214:	e058      	b.n	80062c8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d055      	beq.n	80062c8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2204      	movs	r2, #4
 8006220:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006224:	e050      	b.n	80062c8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	3340      	adds	r3, #64	; 0x40
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f860 	bl	80062f2 <GetLineCoding>
 8006232:	4603      	mov	r3, r0
 8006234:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d126      	bne.n	800628a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	791b      	ldrb	r3, [r3, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d13b      	bne.n	80062cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006260:	429a      	cmp	r2, r3
 8006262:	d133      	bne.n	80062cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006270:	429a      	cmp	r2, r3
 8006272:	d12b      	bne.n	80062cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800627e:	429a      	cmp	r2, r3
 8006280:	d124      	bne.n	80062cc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f95a 	bl	800653c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006288:	e020      	b.n	80062cc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d01d      	beq.n	80062cc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2204      	movs	r2, #4
 8006294:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006298:	e018      	b.n	80062cc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f867 	bl	800636e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f8dc 	bl	800645e <CDC_ProcessReception>
      break;
 80062a6:	e014      	b.n	80062d2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062a8:	2100      	movs	r1, #0
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 ffe5 	bl	800727a <USBH_ClrFeature>
 80062b0:	4603      	mov	r3, r0
 80062b2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062b4:	7bbb      	ldrb	r3, [r7, #14]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062c2:	e005      	b.n	80062d0 <USBH_CDC_Process+0x120>

    default:
      break;
 80062c4:	bf00      	nop
 80062c6:	e004      	b.n	80062d2 <USBH_CDC_Process+0x122>
      break;
 80062c8:	bf00      	nop
 80062ca:	e002      	b.n	80062d2 <USBH_CDC_Process+0x122>
      break;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <USBH_CDC_Process+0x122>
      break;
 80062d0:	bf00      	nop

  }

  return status;
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	22a1      	movs	r2, #161	; 0xa1
 8006300:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2221      	movs	r2, #33	; 0x21
 8006306:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2207      	movs	r2, #7
 8006318:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2207      	movs	r2, #7
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 f98a 	bl	800763a <USBH_CtlReq>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2221      	movs	r2, #33	; 0x21
 800633e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2207      	movs	r2, #7
 8006356:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2207      	movs	r2, #7
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 f96b 	bl	800763a <USBH_CtlReq>
 8006364:	4603      	mov	r3, r0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b086      	sub	sp, #24
 8006372:	af02      	add	r7, sp, #8
 8006374:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006380:	2300      	movs	r3, #0
 8006382:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800638a:	2b01      	cmp	r3, #1
 800638c:	d002      	beq.n	8006394 <CDC_ProcessTransmission+0x26>
 800638e:	2b02      	cmp	r3, #2
 8006390:	d025      	beq.n	80063de <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006392:	e060      	b.n	8006456 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	8b12      	ldrh	r2, [r2, #24]
 800639c:	4293      	cmp	r3, r2
 800639e:	d90c      	bls.n	80063ba <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	69d9      	ldr	r1, [r3, #28]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8b1a      	ldrh	r2, [r3, #24]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	7b58      	ldrb	r0, [r3, #13]
 80063ac:	2301      	movs	r3, #1
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	4603      	mov	r3, r0
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fb51 	bl	8007a5a <USBH_BulkSendData>
 80063b8:	e00c      	b.n	80063d4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	7b58      	ldrb	r0, [r3, #13]
 80063c8:	2301      	movs	r3, #1
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	4603      	mov	r3, r0
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 fb43 	bl	8007a5a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063dc:	e03b      	b.n	8006456 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	7b5b      	ldrb	r3, [r3, #13]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 fe65 	bl	80080b4 <USBH_LL_GetURBState>
 80063ea:	4603      	mov	r3, r0
 80063ec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80063ee:	7afb      	ldrb	r3, [r7, #11]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d128      	bne.n	8006446 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	8b12      	ldrh	r2, [r2, #24]
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d90e      	bls.n	800641e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	8b12      	ldrh	r2, [r2, #24]
 8006408:	1a9a      	subs	r2, r3, r2
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	8b12      	ldrh	r2, [r2, #24]
 8006416:	441a      	add	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	61da      	str	r2, [r3, #28]
 800641c:	e002      	b.n	8006424 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d004      	beq.n	8006436 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006434:	e00e      	b.n	8006454 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f868 	bl	8006514 <USBH_CDC_TransmitCallback>
      break;
 8006444:	e006      	b.n	8006454 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006446:	7afb      	ldrb	r3, [r7, #11]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d103      	bne.n	8006454 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006454:	bf00      	nop
  }
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006470:	2300      	movs	r3, #0
 8006472:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800647a:	2b03      	cmp	r3, #3
 800647c:	d002      	beq.n	8006484 <CDC_ProcessReception+0x26>
 800647e:	2b04      	cmp	r3, #4
 8006480:	d00e      	beq.n	80064a0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006482:	e043      	b.n	800650c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	6a19      	ldr	r1, [r3, #32]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	8b5a      	ldrh	r2, [r3, #26]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	7b1b      	ldrb	r3, [r3, #12]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fb07 	bl	8007aa4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2204      	movs	r2, #4
 800649a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800649e:	e035      	b.n	800650c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	7b1b      	ldrb	r3, [r3, #12]
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 fe04 	bl	80080b4 <USBH_LL_GetURBState>
 80064ac:	4603      	mov	r3, r0
 80064ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064b0:	7cfb      	ldrb	r3, [r7, #19]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d129      	bne.n	800650a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	7b1b      	ldrb	r3, [r3, #12]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fd67 	bl	8007f90 <USBH_LL_GetLastXferSize>
 80064c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d016      	beq.n	80064fc <CDC_ProcessReception+0x9e>
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	8b5b      	ldrh	r3, [r3, #26]
 80064d2:	461a      	mov	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d910      	bls.n	80064fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	441a      	add	r2, r3
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2203      	movs	r2, #3
 80064f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064fa:	e006      	b.n	800650a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f80f 	bl	8006528 <USBH_CDC_ReceiveCallback>
      break;
 800650a:	bf00      	nop
  }
}
 800650c:	bf00      	nop
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006564:	2302      	movs	r3, #2
 8006566:	e029      	b.n	80065bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	79fa      	ldrb	r2, [r7, #7]
 800656c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f81f 	bl	80065c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f001 fc39 	bl	8007e2c <USBH_LL_Init>

  return USBH_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e009      	b.n	80065ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	33e0      	adds	r3, #224	; 0xe0
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	2200      	movs	r2, #0
 80065e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3301      	adds	r3, #1
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b0e      	cmp	r3, #14
 80065ee:	d9f2      	bls.n	80065d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e009      	b.n	800660a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006610:	d3f1      	bcc.n	80065f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2240      	movs	r2, #64	; 0x40
 8006636:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d016      	beq.n	80066ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10e      	bne.n	80066a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006690:	1c59      	adds	r1, r3, #1
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	33de      	adds	r3, #222	; 0xde
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73fb      	strb	r3, [r7, #15]
 80066a6:	e004      	b.n	80066b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066a8:	2302      	movs	r3, #2
 80066aa:	73fb      	strb	r3, [r7, #15]
 80066ac:	e001      	b.n	80066b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066ae:	2302      	movs	r3, #2
 80066b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d204      	bcs.n	80066e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	78fa      	ldrb	r2, [r7, #3]
 80066e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80066e4:	e001      	b.n	80066ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80066e6:	2302      	movs	r3, #2
 80066e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	4608      	mov	r0, r1
 8006702:	4611      	mov	r1, r2
 8006704:	461a      	mov	r2, r3
 8006706:	4603      	mov	r3, r0
 8006708:	70fb      	strb	r3, [r7, #3]
 800670a:	460b      	mov	r3, r1
 800670c:	70bb      	strb	r3, [r7, #2]
 800670e:	4613      	mov	r3, r2
 8006710:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006720:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006722:	e025      	b.n	8006770 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	221a      	movs	r2, #26
 8006728:	fb02 f303 	mul.w	r3, r2, r3
 800672c:	3308      	adds	r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	3302      	adds	r3, #2
 8006734:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	795b      	ldrb	r3, [r3, #5]
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	429a      	cmp	r2, r3
 800673e:	d002      	beq.n	8006746 <USBH_FindInterface+0x4e>
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	2bff      	cmp	r3, #255	; 0xff
 8006744:	d111      	bne.n	800676a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800674a:	78ba      	ldrb	r2, [r7, #2]
 800674c:	429a      	cmp	r2, r3
 800674e:	d002      	beq.n	8006756 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006750:	78bb      	ldrb	r3, [r7, #2]
 8006752:	2bff      	cmp	r3, #255	; 0xff
 8006754:	d109      	bne.n	800676a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800675a:	787a      	ldrb	r2, [r7, #1]
 800675c:	429a      	cmp	r2, r3
 800675e:	d002      	beq.n	8006766 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006760:	787b      	ldrb	r3, [r7, #1]
 8006762:	2bff      	cmp	r3, #255	; 0xff
 8006764:	d101      	bne.n	800676a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	e006      	b.n	8006778 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	3301      	adds	r3, #1
 800676e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d9d6      	bls.n	8006724 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006776:	23ff      	movs	r3, #255	; 0xff
}
 8006778:	4618      	mov	r0, r3
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fb89 	bl	8007ea4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006792:	2101      	movs	r1, #1
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 fca0 	bl	80080da <USBH_LL_DriverVBUS>

  return USBH_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af04      	add	r7, sp, #16
 80067aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067ac:	2302      	movs	r3, #2
 80067ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d102      	bne.n	80067c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2203      	movs	r2, #3
 80067c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b0b      	cmp	r3, #11
 80067ce:	f200 81b3 	bhi.w	8006b38 <USBH_Process+0x394>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <USBH_Process+0x34>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	08006809 	.word	0x08006809
 80067dc:	0800683b 	.word	0x0800683b
 80067e0:	080068a3 	.word	0x080068a3
 80067e4:	08006ad3 	.word	0x08006ad3
 80067e8:	08006b39 	.word	0x08006b39
 80067ec:	08006947 	.word	0x08006947
 80067f0:	08006a79 	.word	0x08006a79
 80067f4:	0800697d 	.word	0x0800697d
 80067f8:	0800699d 	.word	0x0800699d
 80067fc:	080069bd 	.word	0x080069bd
 8006800:	080069eb 	.word	0x080069eb
 8006804:	08006abb 	.word	0x08006abb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8193 	beq.w	8006b3c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800681c:	20c8      	movs	r0, #200	; 0xc8
 800681e:	f001 fca6 	bl	800816e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fb99 	bl	8007f5a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006838:	e180      	b.n	8006b3c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006840:	2b01      	cmp	r3, #1
 8006842:	d107      	bne.n	8006854 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006852:	e182      	b.n	8006b5a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800685a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800685e:	d914      	bls.n	800688a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006866:	3301      	adds	r3, #1
 8006868:	b2da      	uxtb	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006876:	2b03      	cmp	r3, #3
 8006878:	d903      	bls.n	8006882 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	220d      	movs	r2, #13
 800687e:	701a      	strb	r2, [r3, #0]
      break;
 8006880:	e16b      	b.n	8006b5a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	701a      	strb	r2, [r3, #0]
      break;
 8006888:	e167      	b.n	8006b5a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006890:	f103 020a 	add.w	r2, r3, #10
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800689a:	200a      	movs	r0, #10
 800689c:	f001 fc67 	bl	800816e <USBH_Delay>
      break;
 80068a0:	e15b      	b.n	8006b5a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068b2:	2104      	movs	r1, #4
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068b8:	2064      	movs	r0, #100	; 0x64
 80068ba:	f001 fc58 	bl	800816e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fb26 	bl	8007f10 <USBH_LL_GetSpeed>
 80068c4:	4603      	mov	r3, r0
 80068c6:	461a      	mov	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2205      	movs	r2, #5
 80068d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068d4:	2100      	movs	r1, #0
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 f931 	bl	8007b3e <USBH_AllocPipe>
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80068e4:	2180      	movs	r1, #128	; 0x80
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 f929 	bl	8007b3e <USBH_AllocPipe>
 80068ec:	4603      	mov	r3, r0
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	7919      	ldrb	r1, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006908:	b292      	uxth	r2, r2
 800690a:	9202      	str	r2, [sp, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	9201      	str	r2, [sp, #4]
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	4603      	mov	r3, r0
 8006914:	2280      	movs	r2, #128	; 0x80
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 f8e2 	bl	8007ae0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	7959      	ldrb	r1, [r3, #5]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006930:	b292      	uxth	r2, r2
 8006932:	9202      	str	r2, [sp, #8]
 8006934:	2200      	movs	r2, #0
 8006936:	9201      	str	r2, [sp, #4]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4603      	mov	r3, r0
 800693c:	2200      	movs	r2, #0
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 f8ce 	bl	8007ae0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006944:	e109      	b.n	8006b5a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f90c 	bl	8006b64 <USBH_HandleEnum>
 800694c:	4603      	mov	r3, r0
 800694e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 80f3 	bne.w	8006b40 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006968:	2b01      	cmp	r3, #1
 800696a:	d103      	bne.n	8006974 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2208      	movs	r2, #8
 8006970:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006972:	e0e5      	b.n	8006b40 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2207      	movs	r2, #7
 8006978:	701a      	strb	r2, [r3, #0]
      break;
 800697a:	e0e1      	b.n	8006b40 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80de 	beq.w	8006b44 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800698e:	2101      	movs	r1, #1
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2208      	movs	r2, #8
 8006998:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800699a:	e0d3      	b.n	8006b44 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fc20 	bl	80071ec <USBH_SetCfg>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f040 80ca 	bne.w	8006b48 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2209      	movs	r2, #9
 80069b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80069ba:	e0c5      	b.n	8006b48 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80069ca:	2101      	movs	r1, #1
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fc30 	bl	8007232 <USBH_SetFeature>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 80b9 	bne.w	8006b4c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	220a      	movs	r2, #10
 80069de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80069e0:	e0b4      	b.n	8006b4c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	220a      	movs	r2, #10
 80069e6:	701a      	strb	r2, [r3, #0]
      break;
 80069e8:	e0b0      	b.n	8006b4c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80ad 	beq.w	8006b50 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
 8006a02:	e016      	b.n	8006a32 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a04:	7bfa      	ldrb	r2, [r7, #15]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	32de      	adds	r2, #222	; 0xde
 8006a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0e:	791a      	ldrb	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d108      	bne.n	8006a2c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a1a:	7bfa      	ldrb	r2, [r7, #15]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	32de      	adds	r2, #222	; 0xde
 8006a20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a2a:	e005      	b.n	8006a38 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	73fb      	strb	r3, [r7, #15]
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0e5      	beq.n	8006a04 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d016      	beq.n	8006a70 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2206      	movs	r2, #6
 8006a58:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a60:	2103      	movs	r1, #3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a66:	e073      	b.n	8006b50 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	220d      	movs	r2, #13
 8006a6c:	701a      	strb	r2, [r3, #0]
      break;
 8006a6e:	e06f      	b.n	8006b50 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	220d      	movs	r2, #13
 8006a74:	701a      	strb	r2, [r3, #0]
      break;
 8006a76:	e06b      	b.n	8006b50 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d017      	beq.n	8006ab2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	220b      	movs	r2, #11
 8006a9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006aa0:	e058      	b.n	8006b54 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d154      	bne.n	8006b54 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	220d      	movs	r2, #13
 8006aae:	701a      	strb	r2, [r3, #0]
      break;
 8006ab0:	e050      	b.n	8006b54 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	220d      	movs	r2, #13
 8006ab6:	701a      	strb	r2, [r3, #0]
      break;
 8006ab8:	e04c      	b.n	8006b54 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d049      	beq.n	8006b58 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
      }
      break;
 8006ad0:	e042      	b.n	8006b58 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fd72 	bl	80065c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b0e:	2105      	movs	r1, #5
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d107      	bne.n	8006b30 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff fe2b 	bl	8006784 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b2e:	e014      	b.n	8006b5a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f9b7 	bl	8007ea4 <USBH_LL_Start>
      break;
 8006b36:	e010      	b.n	8006b5a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b38:	bf00      	nop
 8006b3a:	e00e      	b.n	8006b5a <USBH_Process+0x3b6>
      break;
 8006b3c:	bf00      	nop
 8006b3e:	e00c      	b.n	8006b5a <USBH_Process+0x3b6>
      break;
 8006b40:	bf00      	nop
 8006b42:	e00a      	b.n	8006b5a <USBH_Process+0x3b6>
    break;
 8006b44:	bf00      	nop
 8006b46:	e008      	b.n	8006b5a <USBH_Process+0x3b6>
      break;
 8006b48:	bf00      	nop
 8006b4a:	e006      	b.n	8006b5a <USBH_Process+0x3b6>
      break;
 8006b4c:	bf00      	nop
 8006b4e:	e004      	b.n	8006b5a <USBH_Process+0x3b6>
      break;
 8006b50:	bf00      	nop
 8006b52:	e002      	b.n	8006b5a <USBH_Process+0x3b6>
      break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <USBH_Process+0x3b6>
      break;
 8006b58:	bf00      	nop
  }
  return USBH_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af04      	add	r7, sp, #16
 8006b6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b07      	cmp	r3, #7
 8006b7a:	f200 81c1 	bhi.w	8006f00 <USBH_HandleEnum+0x39c>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <USBH_HandleEnum+0x20>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006ba5 	.word	0x08006ba5
 8006b88:	08006c63 	.word	0x08006c63
 8006b8c:	08006ccd 	.word	0x08006ccd
 8006b90:	08006d5b 	.word	0x08006d5b
 8006b94:	08006dc5 	.word	0x08006dc5
 8006b98:	08006e35 	.word	0x08006e35
 8006b9c:	08006e7b 	.word	0x08006e7b
 8006ba0:	08006ec1 	.word	0x08006ec1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ba4:	2108      	movs	r1, #8
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa50 	bl	800704c <USBH_Get_DevDesc>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d130      	bne.n	8006c18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	7919      	ldrb	r1, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	9202      	str	r2, [sp, #8]
 8006bde:	2200      	movs	r2, #0
 8006be0:	9201      	str	r2, [sp, #4]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	4603      	mov	r3, r0
 8006be6:	2280      	movs	r2, #128	; 0x80
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 ff79 	bl	8007ae0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	7959      	ldrb	r1, [r3, #5]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c02:	b292      	uxth	r2, r2
 8006c04:	9202      	str	r2, [sp, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	9201      	str	r2, [sp, #4]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2200      	movs	r2, #0
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 ff65 	bl	8007ae0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c16:	e175      	b.n	8006f04 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	f040 8172 	bne.w	8006f04 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c26:	3301      	adds	r3, #1
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d903      	bls.n	8006c42 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	220d      	movs	r2, #13
 8006c3e:	701a      	strb	r2, [r3, #0]
      break;
 8006c40:	e160      	b.n	8006f04 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	795b      	ldrb	r3, [r3, #5]
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 ff99 	bl	8007b80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	791b      	ldrb	r3, [r3, #4]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 ff93 	bl	8007b80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]
      break;
 8006c60:	e150      	b.n	8006f04 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c62:	2112      	movs	r1, #18
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f9f1 	bl	800704c <USBH_Get_DevDesc>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d103      	bne.n	8006c7c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c7a:	e145      	b.n	8006f08 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	f040 8142 	bne.w	8006f08 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d903      	bls.n	8006ca6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	220d      	movs	r2, #13
 8006ca2:	701a      	strb	r2, [r3, #0]
      break;
 8006ca4:	e130      	b.n	8006f08 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	795b      	ldrb	r3, [r3, #5]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 ff67 	bl	8007b80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	791b      	ldrb	r3, [r3, #4]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 ff61 	bl	8007b80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	701a      	strb	r2, [r3, #0]
      break;
 8006cca:	e11d      	b.n	8006f08 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006ccc:	2101      	movs	r1, #1
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa68 	bl	80071a4 <USBH_SetAddress>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d132      	bne.n	8006d44 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006cde:	2002      	movs	r0, #2
 8006ce0:	f001 fa45 	bl	800816e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2203      	movs	r2, #3
 8006cf0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7919      	ldrb	r1, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d06:	b292      	uxth	r2, r2
 8006d08:	9202      	str	r2, [sp, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	9201      	str	r2, [sp, #4]
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	4603      	mov	r3, r0
 8006d12:	2280      	movs	r2, #128	; 0x80
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fee3 	bl	8007ae0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	7959      	ldrb	r1, [r3, #5]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d2e:	b292      	uxth	r2, r2
 8006d30:	9202      	str	r2, [sp, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	9201      	str	r2, [sp, #4]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fecf 	bl	8007ae0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d42:	e0e3      	b.n	8006f0c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	f040 80e0 	bne.w	8006f0c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	220d      	movs	r2, #13
 8006d50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	705a      	strb	r2, [r3, #1]
      break;
 8006d58:	e0d8      	b.n	8006f0c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d5a:	2109      	movs	r1, #9
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f99d 	bl	800709c <USBH_Get_CfgDesc>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2204      	movs	r2, #4
 8006d70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d72:	e0cd      	b.n	8006f10 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	f040 80ca 	bne.w	8006f10 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d82:	3301      	adds	r3, #1
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d903      	bls.n	8006d9e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	220d      	movs	r2, #13
 8006d9a:	701a      	strb	r2, [r3, #0]
      break;
 8006d9c:	e0b8      	b.n	8006f10 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	795b      	ldrb	r3, [r3, #5]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 feeb 	bl	8007b80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	791b      	ldrb	r3, [r3, #4]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fee5 	bl	8007b80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
      break;
 8006dc2:	e0a5      	b.n	8006f10 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f965 	bl	800709c <USBH_Get_CfgDesc>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2205      	movs	r2, #5
 8006de0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006de2:	e097      	b.n	8006f14 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	f040 8094 	bne.w	8006f14 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006df2:	3301      	adds	r3, #1
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d903      	bls.n	8006e0e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	220d      	movs	r2, #13
 8006e0a:	701a      	strb	r2, [r3, #0]
      break;
 8006e0c:	e082      	b.n	8006f14 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	795b      	ldrb	r3, [r3, #5]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 feb3 	bl	8007b80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	791b      	ldrb	r3, [r3, #4]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fead 	bl	8007b80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
      break;
 8006e32:	e06f      	b.n	8006f14 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d019      	beq.n	8006e72 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e4a:	23ff      	movs	r3, #255	; 0xff
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f949 	bl	80070e4 <USBH_Get_StringDesc>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d103      	bne.n	8006e64 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2206      	movs	r2, #6
 8006e60:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e62:	e059      	b.n	8006f18 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d156      	bne.n	8006f18 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2206      	movs	r2, #6
 8006e6e:	705a      	strb	r2, [r3, #1]
      break;
 8006e70:	e052      	b.n	8006f18 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2206      	movs	r2, #6
 8006e76:	705a      	strb	r2, [r3, #1]
      break;
 8006e78:	e04e      	b.n	8006f18 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d019      	beq.n	8006eb8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e90:	23ff      	movs	r3, #255	; 0xff
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f926 	bl	80070e4 <USBH_Get_StringDesc>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ea8:	e038      	b.n	8006f1c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d135      	bne.n	8006f1c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2207      	movs	r2, #7
 8006eb4:	705a      	strb	r2, [r3, #1]
      break;
 8006eb6:	e031      	b.n	8006f1c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2207      	movs	r2, #7
 8006ebc:	705a      	strb	r2, [r3, #1]
      break;
 8006ebe:	e02d      	b.n	8006f1c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d017      	beq.n	8006efa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ed6:	23ff      	movs	r3, #255	; 0xff
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f903 	bl	80070e4 <USBH_Get_StringDesc>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006eec:	e018      	b.n	8006f20 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d115      	bne.n	8006f20 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef8:	e012      	b.n	8006f20 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
      break;
 8006efe:	e00f      	b.n	8006f20 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f00:	bf00      	nop
 8006f02:	e00e      	b.n	8006f22 <USBH_HandleEnum+0x3be>
      break;
 8006f04:	bf00      	nop
 8006f06:	e00c      	b.n	8006f22 <USBH_HandleEnum+0x3be>
      break;
 8006f08:	bf00      	nop
 8006f0a:	e00a      	b.n	8006f22 <USBH_HandleEnum+0x3be>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e008      	b.n	8006f22 <USBH_HandleEnum+0x3be>
      break;
 8006f10:	bf00      	nop
 8006f12:	e006      	b.n	8006f22 <USBH_HandleEnum+0x3be>
      break;
 8006f14:	bf00      	nop
 8006f16:	e004      	b.n	8006f22 <USBH_HandleEnum+0x3be>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e002      	b.n	8006f22 <USBH_HandleEnum+0x3be>
      break;
 8006f1c:	bf00      	nop
 8006f1e:	e000      	b.n	8006f22 <USBH_HandleEnum+0x3be>
      break;
 8006f20:	bf00      	nop
  }
  return Status;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f804 	bl	8006f6e <USBH_HandleSof>
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b0b      	cmp	r3, #11
 8006f7e:	d10a      	bne.n	8006f96 <USBH_HandleSof+0x28>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	4798      	blx	r3
  }
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006fae:	bf00      	nop
}
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006fca:	bf00      	nop
}
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 ff58 	bl	8007eda <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	791b      	ldrb	r3, [r3, #4]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fda5 	bl	8007b80 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	795b      	ldrb	r3, [r3, #5]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fd9f 	bl	8007b80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af02      	add	r7, sp, #8
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	b29b      	uxth	r3, r3
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800706a:	2100      	movs	r1, #0
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f864 	bl	800713a <USBH_GetDescriptor>
 8007072:	4603      	mov	r3, r0
 8007074:	73fb      	strb	r3, [r7, #15]
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007088:	78fa      	ldrb	r2, [r7, #3]
 800708a:	b292      	uxth	r2, r2
 800708c:	4619      	mov	r1, r3
 800708e:	f000 f918 	bl	80072c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	331c      	adds	r3, #28
 80070ac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070ae:	887b      	ldrh	r3, [r7, #2]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b8:	2100      	movs	r1, #0
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f83d 	bl	800713a <USBH_GetDescriptor>
 80070c0:	4603      	mov	r3, r0
 80070c2:	72fb      	strb	r3, [r7, #11]
 80070c4:	7afb      	ldrb	r3, [r7, #11]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d107      	bne.n	80070da <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070d0:	887a      	ldrh	r2, [r7, #2]
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f964 	bl	80073a2 <USBH_ParseCfgDesc>
  }

  return status;
 80070da:	7afb      	ldrb	r3, [r7, #11]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	461a      	mov	r2, r3
 80070f0:	460b      	mov	r3, r1
 80070f2:	72fb      	strb	r3, [r7, #11]
 80070f4:	4613      	mov	r3, r2
 80070f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007100:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007108:	893b      	ldrh	r3, [r7, #8]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	460b      	mov	r3, r1
 800710e:	2100      	movs	r1, #0
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 f812 	bl	800713a <USBH_GetDescriptor>
 8007116:	4603      	mov	r3, r0
 8007118:	75fb      	strb	r3, [r7, #23]
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d107      	bne.n	8007130 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007126:	893a      	ldrh	r2, [r7, #8]
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fa37 	bl	800759e <USBH_ParseStringDesc>
  }

  return status;
 8007130:	7dfb      	ldrb	r3, [r7, #23]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	607b      	str	r3, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	72fb      	strb	r3, [r7, #11]
 8007148:	4613      	mov	r3, r2
 800714a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	789b      	ldrb	r3, [r3, #2]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d11c      	bne.n	800718e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007154:	7afb      	ldrb	r3, [r7, #11]
 8007156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2206      	movs	r2, #6
 8007164:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	893a      	ldrh	r2, [r7, #8]
 800716a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800716c:	893b      	ldrh	r3, [r7, #8]
 800716e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007176:	d104      	bne.n	8007182 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f240 4209 	movw	r2, #1033	; 0x409
 800717e:	829a      	strh	r2, [r3, #20]
 8007180:	e002      	b.n	8007188 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8b3a      	ldrh	r2, [r7, #24]
 800718c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800718e:	8b3b      	ldrh	r3, [r7, #24]
 8007190:	461a      	mov	r2, r3
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fa50 	bl	800763a <USBH_CtlReq>
 800719a:	4603      	mov	r3, r0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	789b      	ldrb	r3, [r3, #2]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d10f      	bne.n	80071d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2205      	movs	r2, #5
 80071c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80071d8:	2200      	movs	r2, #0
 80071da:	2100      	movs	r1, #0
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fa2c 	bl	800763a <USBH_CtlReq>
 80071e2:	4603      	mov	r3, r0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	789b      	ldrb	r3, [r3, #2]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d10e      	bne.n	800721e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2209      	movs	r2, #9
 800720a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	887a      	ldrh	r2, [r7, #2]
 8007210:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800721e:	2200      	movs	r2, #0
 8007220:	2100      	movs	r1, #0
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa09 	bl	800763a <USBH_CtlReq>
 8007228:	4603      	mov	r3, r0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	789b      	ldrb	r3, [r3, #2]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d10f      	bne.n	8007266 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2203      	movs	r2, #3
 8007250:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	b29a      	uxth	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007266:	2200      	movs	r2, #0
 8007268:	2100      	movs	r1, #0
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f9e5 	bl	800763a <USBH_CtlReq>
 8007270:	4603      	mov	r3, r0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	460b      	mov	r3, r1
 8007284:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	789b      	ldrb	r3, [r3, #2]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10f      	bne.n	80072ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80072ae:	2200      	movs	r2, #0
 80072b0:	2100      	movs	r1, #0
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f9c1 	bl	800763a <USBH_CtlReq>
 80072b8:	4603      	mov	r3, r0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	4613      	mov	r3, r2
 80072ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	781a      	ldrb	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	785a      	ldrb	r2, [r3, #1]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	3302      	adds	r3, #2
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	3303      	adds	r3, #3
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	4313      	orrs	r3, r2
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	791a      	ldrb	r2, [r3, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	795a      	ldrb	r2, [r3, #5]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	799a      	ldrb	r2, [r3, #6]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	79da      	ldrb	r2, [r3, #7]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	2b08      	cmp	r3, #8
 8007320:	d939      	bls.n	8007396 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3308      	adds	r3, #8
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b29a      	uxth	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	3309      	adds	r3, #9
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	021b      	lsls	r3, r3, #8
 8007334:	b29b      	uxth	r3, r3
 8007336:	4313      	orrs	r3, r2
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	330a      	adds	r3, #10
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	b29a      	uxth	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	330b      	adds	r3, #11
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	b29b      	uxth	r3, r3
 8007352:	4313      	orrs	r3, r2
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	330c      	adds	r3, #12
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b29a      	uxth	r2, r3
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	330d      	adds	r3, #13
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	b29b      	uxth	r3, r3
 800736e:	4313      	orrs	r3, r2
 8007370:	b29a      	uxth	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	7b9a      	ldrb	r2, [r3, #14]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	7bda      	ldrb	r2, [r3, #15]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	7c1a      	ldrb	r2, [r3, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	7c5a      	ldrb	r2, [r3, #17]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	745a      	strb	r2, [r3, #17]
  }
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b08a      	sub	sp, #40	; 0x28
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	4613      	mov	r3, r2
 80073ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	785a      	ldrb	r2, [r3, #1]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	3302      	adds	r3, #2
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	3303      	adds	r3, #3
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4313      	orrs	r3, r2
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	791a      	ldrb	r2, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	795a      	ldrb	r2, [r3, #5]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	799a      	ldrb	r2, [r3, #6]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	79da      	ldrb	r2, [r3, #7]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	7a1a      	ldrb	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	2b09      	cmp	r3, #9
 800741c:	d95f      	bls.n	80074de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800741e:	2309      	movs	r3, #9
 8007420:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007422:	2300      	movs	r3, #0
 8007424:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007426:	e051      	b.n	80074cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007428:	f107 0316 	add.w	r3, r7, #22
 800742c:	4619      	mov	r1, r3
 800742e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007430:	f000 f8e8 	bl	8007604 <USBH_GetNextDesc>
 8007434:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	2b04      	cmp	r3, #4
 800743c:	d146      	bne.n	80074cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800743e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007442:	221a      	movs	r2, #26
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	3308      	adds	r3, #8
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	3302      	adds	r3, #2
 8007450:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007454:	69f8      	ldr	r0, [r7, #28]
 8007456:	f000 f846 	bl	80074e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007460:	2300      	movs	r3, #0
 8007462:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007464:	e022      	b.n	80074ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007466:	f107 0316 	add.w	r3, r7, #22
 800746a:	4619      	mov	r1, r3
 800746c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800746e:	f000 f8c9 	bl	8007604 <USBH_GetNextDesc>
 8007472:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	2b05      	cmp	r3, #5
 800747a:	d117      	bne.n	80074ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800747c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007480:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007484:	3201      	adds	r2, #1
 8007486:	00d2      	lsls	r2, r2, #3
 8007488:	211a      	movs	r1, #26
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	3308      	adds	r3, #8
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4413      	add	r3, r2
 8007496:	3304      	adds	r3, #4
 8007498:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800749a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800749c:	69b8      	ldr	r0, [r7, #24]
 800749e:	f000 f851 	bl	8007544 <USBH_ParseEPDesc>
            ep_ix++;
 80074a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80074a6:	3301      	adds	r3, #1
 80074a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	791b      	ldrb	r3, [r3, #4]
 80074b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d204      	bcs.n	80074c2 <USBH_ParseCfgDesc+0x120>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	885a      	ldrh	r2, [r3, #2]
 80074bc:	8afb      	ldrh	r3, [r7, #22]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d8d1      	bhi.n	8007466 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80074c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074c6:	3301      	adds	r3, #1
 80074c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d804      	bhi.n	80074de <USBH_ParseCfgDesc+0x13c>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	885a      	ldrh	r2, [r3, #2]
 80074d8:	8afb      	ldrh	r3, [r7, #22]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d8a4      	bhi.n	8007428 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80074de:	bf00      	nop
 80074e0:	3728      	adds	r7, #40	; 0x28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	785a      	ldrb	r2, [r3, #1]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	789a      	ldrb	r2, [r3, #2]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	78da      	ldrb	r2, [r3, #3]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	791a      	ldrb	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	795a      	ldrb	r2, [r3, #5]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	799a      	ldrb	r2, [r3, #6]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	79da      	ldrb	r2, [r3, #7]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	7a1a      	ldrb	r2, [r3, #8]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	721a      	strb	r2, [r3, #8]
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781a      	ldrb	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	785a      	ldrb	r2, [r3, #1]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	789a      	ldrb	r2, [r3, #2]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	78da      	ldrb	r2, [r3, #3]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	3304      	adds	r3, #4
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	b29a      	uxth	r2, r3
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	3305      	adds	r3, #5
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	b29b      	uxth	r3, r3
 8007582:	4313      	orrs	r3, r2
 8007584:	b29a      	uxth	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	799a      	ldrb	r2, [r3, #6]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	719a      	strb	r2, [r3, #6]
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800759e:	b480      	push	{r7}
 80075a0:	b087      	sub	sp, #28
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	4613      	mov	r3, r2
 80075aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3301      	adds	r3, #1
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d120      	bne.n	80075f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	1e9a      	subs	r2, r3, #2
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	4293      	cmp	r3, r2
 80075c0:	bf28      	it	cs
 80075c2:	4613      	movcs	r3, r2
 80075c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3302      	adds	r3, #2
 80075ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80075cc:	2300      	movs	r3, #0
 80075ce:	82fb      	strh	r3, [r7, #22]
 80075d0:	e00b      	b.n	80075ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80075d2:	8afb      	ldrh	r3, [r7, #22]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	3301      	adds	r3, #1
 80075e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80075e4:	8afb      	ldrh	r3, [r7, #22]
 80075e6:	3302      	adds	r3, #2
 80075e8:	82fb      	strh	r3, [r7, #22]
 80075ea:	8afa      	ldrh	r2, [r7, #22]
 80075ec:	8abb      	ldrh	r3, [r7, #20]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d3ef      	bcc.n	80075d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2200      	movs	r2, #0
 80075f6:	701a      	strb	r2, [r3, #0]
  }
}
 80075f8:	bf00      	nop
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	881a      	ldrh	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	4413      	add	r3, r2
 800761a:	b29a      	uxth	r2, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4413      	add	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800762c:	68fb      	ldr	r3, [r7, #12]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b086      	sub	sp, #24
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	4613      	mov	r3, r2
 8007646:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007648:	2301      	movs	r3, #1
 800764a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	789b      	ldrb	r3, [r3, #2]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d002      	beq.n	800765a <USBH_CtlReq+0x20>
 8007654:	2b02      	cmp	r3, #2
 8007656:	d00f      	beq.n	8007678 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007658:	e027      	b.n	80076aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	88fa      	ldrh	r2, [r7, #6]
 8007664:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2202      	movs	r2, #2
 8007670:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007672:	2301      	movs	r3, #1
 8007674:	75fb      	strb	r3, [r7, #23]
      break;
 8007676:	e018      	b.n	80076aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f81b 	bl	80076b4 <USBH_HandleControl>
 800767e:	4603      	mov	r3, r0
 8007680:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007682:	7dfb      	ldrb	r3, [r7, #23]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <USBH_CtlReq+0x54>
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	2b03      	cmp	r3, #3
 800768c:	d106      	bne.n	800769c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	761a      	strb	r2, [r3, #24]
      break;
 800769a:	e005      	b.n	80076a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d102      	bne.n	80076a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	709a      	strb	r2, [r3, #2]
      break;
 80076a8:	bf00      	nop
  }
  return status;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80076bc:	2301      	movs	r3, #1
 80076be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7e1b      	ldrb	r3, [r3, #24]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	2b0a      	cmp	r3, #10
 80076cc:	f200 8158 	bhi.w	8007980 <USBH_HandleControl+0x2cc>
 80076d0:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <USBH_HandleControl+0x24>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	08007705 	.word	0x08007705
 80076dc:	0800771f 	.word	0x0800771f
 80076e0:	08007789 	.word	0x08007789
 80076e4:	080077af 	.word	0x080077af
 80076e8:	080077e7 	.word	0x080077e7
 80076ec:	08007813 	.word	0x08007813
 80076f0:	08007865 	.word	0x08007865
 80076f4:	08007887 	.word	0x08007887
 80076f8:	080078c3 	.word	0x080078c3
 80076fc:	080078eb 	.word	0x080078eb
 8007700:	08007929 	.word	0x08007929
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f103 0110 	add.w	r1, r3, #16
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	795b      	ldrb	r3, [r3, #5]
 800770e:	461a      	mov	r2, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f945 	bl	80079a0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	761a      	strb	r2, [r3, #24]
      break;
 800771c:	e13b      	b.n	8007996 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fcc5 	bl	80080b4 <USBH_LL_GetURBState>
 800772a:	4603      	mov	r3, r0
 800772c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d11e      	bne.n	8007772 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7c1b      	ldrb	r3, [r3, #16]
 8007738:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800773c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8adb      	ldrh	r3, [r3, #22]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007746:	7b7b      	ldrb	r3, [r7, #13]
 8007748:	2b80      	cmp	r3, #128	; 0x80
 800774a:	d103      	bne.n	8007754 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2203      	movs	r2, #3
 8007750:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007752:	e117      	b.n	8007984 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2205      	movs	r2, #5
 8007758:	761a      	strb	r2, [r3, #24]
      break;
 800775a:	e113      	b.n	8007984 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800775c:	7b7b      	ldrb	r3, [r7, #13]
 800775e:	2b80      	cmp	r3, #128	; 0x80
 8007760:	d103      	bne.n	800776a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2209      	movs	r2, #9
 8007766:	761a      	strb	r2, [r3, #24]
      break;
 8007768:	e10c      	b.n	8007984 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2207      	movs	r2, #7
 800776e:	761a      	strb	r2, [r3, #24]
      break;
 8007770:	e108      	b.n	8007984 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	2b04      	cmp	r3, #4
 8007776:	d003      	beq.n	8007780 <USBH_HandleControl+0xcc>
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b02      	cmp	r3, #2
 800777c:	f040 8102 	bne.w	8007984 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	220b      	movs	r2, #11
 8007784:	761a      	strb	r2, [r3, #24]
      break;
 8007786:	e0fd      	b.n	8007984 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800778e:	b29a      	uxth	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6899      	ldr	r1, [r3, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	899a      	ldrh	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	791b      	ldrb	r3, [r3, #4]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f93c 	bl	8007a1e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2204      	movs	r2, #4
 80077aa:	761a      	strb	r2, [r3, #24]
      break;
 80077ac:	e0f3      	b.n	8007996 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	791b      	ldrb	r3, [r3, #4]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fc7d 	bl	80080b4 <USBH_LL_GetURBState>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d102      	bne.n	80077ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2209      	movs	r2, #9
 80077c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b05      	cmp	r3, #5
 80077ce:	d102      	bne.n	80077d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80077d0:	2303      	movs	r3, #3
 80077d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80077d4:	e0d8      	b.n	8007988 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	2b04      	cmp	r3, #4
 80077da:	f040 80d5 	bne.w	8007988 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	220b      	movs	r2, #11
 80077e2:	761a      	strb	r2, [r3, #24]
      break;
 80077e4:	e0d0      	b.n	8007988 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6899      	ldr	r1, [r3, #8]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	899a      	ldrh	r2, [r3, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	7958      	ldrb	r0, [r3, #5]
 80077f2:	2301      	movs	r3, #1
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4603      	mov	r3, r0
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f8eb 	bl	80079d4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007804:	b29a      	uxth	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2206      	movs	r2, #6
 800780e:	761a      	strb	r2, [r3, #24]
      break;
 8007810:	e0c1      	b.n	8007996 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fc4b 	bl	80080b4 <USBH_LL_GetURBState>
 800781e:	4603      	mov	r3, r0
 8007820:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d103      	bne.n	8007830 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2207      	movs	r2, #7
 800782c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800782e:	e0ad      	b.n	800798c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b05      	cmp	r3, #5
 8007834:	d105      	bne.n	8007842 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	220c      	movs	r2, #12
 800783a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800783c:	2303      	movs	r3, #3
 800783e:	73fb      	strb	r3, [r7, #15]
      break;
 8007840:	e0a4      	b.n	800798c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d103      	bne.n	8007850 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2205      	movs	r2, #5
 800784c:	761a      	strb	r2, [r3, #24]
      break;
 800784e:	e09d      	b.n	800798c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b04      	cmp	r3, #4
 8007854:	f040 809a 	bne.w	800798c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	220b      	movs	r2, #11
 800785c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800785e:	2302      	movs	r3, #2
 8007860:	73fb      	strb	r3, [r7, #15]
      break;
 8007862:	e093      	b.n	800798c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	2100      	movs	r1, #0
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f8d6 	bl	8007a1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007878:	b29a      	uxth	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2208      	movs	r2, #8
 8007882:	761a      	strb	r2, [r3, #24]

      break;
 8007884:	e087      	b.n	8007996 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	791b      	ldrb	r3, [r3, #4]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fc11 	bl	80080b4 <USBH_LL_GetURBState>
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d105      	bne.n	80078a8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	220d      	movs	r2, #13
 80078a0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078a6:	e073      	b.n	8007990 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d103      	bne.n	80078b6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	220b      	movs	r2, #11
 80078b2:	761a      	strb	r2, [r3, #24]
      break;
 80078b4:	e06c      	b.n	8007990 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	2b05      	cmp	r3, #5
 80078ba:	d169      	bne.n	8007990 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80078bc:	2303      	movs	r3, #3
 80078be:	73fb      	strb	r3, [r7, #15]
      break;
 80078c0:	e066      	b.n	8007990 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	795a      	ldrb	r2, [r3, #5]
 80078c6:	2301      	movs	r3, #1
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	4613      	mov	r3, r2
 80078cc:	2200      	movs	r2, #0
 80078ce:	2100      	movs	r1, #0
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f87f 	bl	80079d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	220a      	movs	r2, #10
 80078e6:	761a      	strb	r2, [r3, #24]
      break;
 80078e8:	e055      	b.n	8007996 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	795b      	ldrb	r3, [r3, #5]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fbdf 	bl	80080b4 <USBH_LL_GetURBState>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d105      	bne.n	800790c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	220d      	movs	r2, #13
 8007908:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800790a:	e043      	b.n	8007994 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d103      	bne.n	800791a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2209      	movs	r2, #9
 8007916:	761a      	strb	r2, [r3, #24]
      break;
 8007918:	e03c      	b.n	8007994 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b04      	cmp	r3, #4
 800791e:	d139      	bne.n	8007994 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	220b      	movs	r2, #11
 8007924:	761a      	strb	r2, [r3, #24]
      break;
 8007926:	e035      	b.n	8007994 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	7e5b      	ldrb	r3, [r3, #25]
 800792c:	3301      	adds	r3, #1
 800792e:	b2da      	uxtb	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	765a      	strb	r2, [r3, #25]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7e5b      	ldrb	r3, [r3, #25]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d806      	bhi.n	800794a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007948:	e025      	b.n	8007996 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007950:	2106      	movs	r1, #6
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	795b      	ldrb	r3, [r3, #5]
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f90c 	bl	8007b80 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	791b      	ldrb	r3, [r3, #4]
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f906 	bl	8007b80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800797a:	2302      	movs	r3, #2
 800797c:	73fb      	strb	r3, [r7, #15]
      break;
 800797e:	e00a      	b.n	8007996 <USBH_HandleControl+0x2e2>

    default:
      break;
 8007980:	bf00      	nop
 8007982:	e008      	b.n	8007996 <USBH_HandleControl+0x2e2>
      break;
 8007984:	bf00      	nop
 8007986:	e006      	b.n	8007996 <USBH_HandleControl+0x2e2>
      break;
 8007988:	bf00      	nop
 800798a:	e004      	b.n	8007996 <USBH_HandleControl+0x2e2>
      break;
 800798c:	bf00      	nop
 800798e:	e002      	b.n	8007996 <USBH_HandleControl+0x2e2>
      break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <USBH_HandleControl+0x2e2>
      break;
 8007994:	bf00      	nop
  }

  return status;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af04      	add	r7, sp, #16
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80079ae:	79f9      	ldrb	r1, [r7, #7]
 80079b0:	2300      	movs	r3, #0
 80079b2:	9303      	str	r3, [sp, #12]
 80079b4:	2308      	movs	r3, #8
 80079b6:	9302      	str	r3, [sp, #8]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	2300      	movs	r3, #0
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	2300      	movs	r3, #0
 80079c2:	2200      	movs	r2, #0
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 fb44 	bl	8008052 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af04      	add	r7, sp, #16
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4611      	mov	r1, r2
 80079e0:	461a      	mov	r2, r3
 80079e2:	460b      	mov	r3, r1
 80079e4:	80fb      	strh	r3, [r7, #6]
 80079e6:	4613      	mov	r3, r2
 80079e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80079f8:	7979      	ldrb	r1, [r7, #5]
 80079fa:	7e3b      	ldrb	r3, [r7, #24]
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	9302      	str	r3, [sp, #8]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	2301      	movs	r3, #1
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 fb1f 	bl	8008052 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b088      	sub	sp, #32
 8007a22:	af04      	add	r7, sp, #16
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	80fb      	strh	r3, [r7, #6]
 8007a30:	4613      	mov	r3, r2
 8007a32:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a34:	7979      	ldrb	r1, [r7, #5]
 8007a36:	2300      	movs	r3, #0
 8007a38:	9303      	str	r3, [sp, #12]
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	9302      	str	r3, [sp, #8]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	2301      	movs	r3, #1
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	2300      	movs	r3, #0
 8007a48:	2201      	movs	r2, #1
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 fb01 	bl	8008052 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007a50:	2300      	movs	r3, #0

}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b088      	sub	sp, #32
 8007a5e:	af04      	add	r7, sp, #16
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	4611      	mov	r1, r2
 8007a66:	461a      	mov	r2, r3
 8007a68:	460b      	mov	r3, r1
 8007a6a:	80fb      	strh	r3, [r7, #6]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a7e:	7979      	ldrb	r1, [r7, #5]
 8007a80:	7e3b      	ldrb	r3, [r7, #24]
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	2302      	movs	r3, #2
 8007a92:	2200      	movs	r2, #0
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fadc 	bl	8008052 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	80fb      	strh	r3, [r7, #6]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007aba:	7979      	ldrb	r1, [r7, #5]
 8007abc:	2300      	movs	r3, #0
 8007abe:	9303      	str	r3, [sp, #12]
 8007ac0:	88fb      	ldrh	r3, [r7, #6]
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	2302      	movs	r3, #2
 8007ace:	2201      	movs	r2, #1
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fabe 	bl	8008052 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af04      	add	r7, sp, #16
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	4608      	mov	r0, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	461a      	mov	r2, r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	70fb      	strb	r3, [r7, #3]
 8007af2:	460b      	mov	r3, r1
 8007af4:	70bb      	strb	r3, [r7, #2]
 8007af6:	4613      	mov	r3, r2
 8007af8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007afa:	7878      	ldrb	r0, [r7, #1]
 8007afc:	78ba      	ldrb	r2, [r7, #2]
 8007afe:	78f9      	ldrb	r1, [r7, #3]
 8007b00:	8b3b      	ldrh	r3, [r7, #24]
 8007b02:	9302      	str	r3, [sp, #8]
 8007b04:	7d3b      	ldrb	r3, [r7, #20]
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	7c3b      	ldrb	r3, [r7, #16]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fa51 	bl	8007fb6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa70 	bl	8008014 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f836 	bl	8007bbc <USBH_GetFreePipe>
 8007b50:	4603      	mov	r3, r0
 8007b52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b54:	89fb      	ldrh	r3, [r7, #14]
 8007b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00a      	beq.n	8007b74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	89fb      	ldrh	r3, [r7, #14]
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	33e0      	adds	r3, #224	; 0xe0
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	b2db      	uxtb	r3, r3
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	2b0a      	cmp	r3, #10
 8007b90:	d80d      	bhi.n	8007bae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007b92:	78fb      	ldrb	r3, [r7, #3]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	33e0      	adds	r3, #224	; 0xe0
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	33e0      	adds	r3, #224	; 0xe0
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73fb      	strb	r3, [r7, #15]
 8007bcc:	e00f      	b.n	8007bee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	33e0      	adds	r3, #224	; 0xe0
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d102      	bne.n	8007be8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	e007      	b.n	8007bf8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	3301      	adds	r3, #1
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b0a      	cmp	r3, #10
 8007bf2:	d9ec      	bls.n	8007bce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	490e      	ldr	r1, [pc, #56]	; (8007c44 <MX_USB_HOST_Init+0x40>)
 8007c0c:	480e      	ldr	r0, [pc, #56]	; (8007c48 <MX_USB_HOST_Init+0x44>)
 8007c0e:	f7fe fc9f 	bl	8006550 <USBH_Init>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007c18:	f7f8 ff30 	bl	8000a7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007c1c:	490b      	ldr	r1, [pc, #44]	; (8007c4c <MX_USB_HOST_Init+0x48>)
 8007c1e:	480a      	ldr	r0, [pc, #40]	; (8007c48 <MX_USB_HOST_Init+0x44>)
 8007c20:	f7fe fd24 	bl	800666c <USBH_RegisterClass>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007c2a:	f7f8 ff27 	bl	8000a7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007c2e:	4806      	ldr	r0, [pc, #24]	; (8007c48 <MX_USB_HOST_Init+0x44>)
 8007c30:	f7fe fda8 	bl	8006784 <USBH_Start>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007c3a:	f7f8 ff1f 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007c3e:	bf00      	nop
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	08007c65 	.word	0x08007c65
 8007c48:	2000018c 	.word	0x2000018c
 8007c4c:	2000000c 	.word	0x2000000c

08007c50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007c54:	4802      	ldr	r0, [pc, #8]	; (8007c60 <MX_USB_HOST_Process+0x10>)
 8007c56:	f7fe fda5 	bl	80067a4 <USBH_Process>
}
 8007c5a:	bf00      	nop
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	2000018c 	.word	0x2000018c

08007c64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d819      	bhi.n	8007cac <USBH_UserProcess+0x48>
 8007c78:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <USBH_UserProcess+0x1c>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	08007c9d 	.word	0x08007c9d
 8007c88:	08007cad 	.word	0x08007cad
 8007c8c:	08007ca5 	.word	0x08007ca5
 8007c90:	08007c95 	.word	0x08007c95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007c94:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <USBH_UserProcess+0x58>)
 8007c96:	2203      	movs	r2, #3
 8007c98:	701a      	strb	r2, [r3, #0]
  break;
 8007c9a:	e008      	b.n	8007cae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007c9c:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <USBH_UserProcess+0x58>)
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	701a      	strb	r2, [r3, #0]
  break;
 8007ca2:	e004      	b.n	8007cae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <USBH_UserProcess+0x58>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	701a      	strb	r2, [r3, #0]
  break;
 8007caa:	e000      	b.n	8007cae <USBH_UserProcess+0x4a>

  default:
  break;
 8007cac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	200000bc 	.word	0x200000bc

08007cc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cc8:	f107 0314 	add.w	r3, r7, #20
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	605a      	str	r2, [r3, #4]
 8007cd2:	609a      	str	r2, [r3, #8]
 8007cd4:	60da      	str	r2, [r3, #12]
 8007cd6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ce0:	d147      	bne.n	8007d72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	4b25      	ldr	r3, [pc, #148]	; (8007d7c <HAL_HCD_MspInit+0xbc>)
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	4a24      	ldr	r2, [pc, #144]	; (8007d7c <HAL_HCD_MspInit+0xbc>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cf2:	4b22      	ldr	r3, [pc, #136]	; (8007d7c <HAL_HCD_MspInit+0xbc>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	613b      	str	r3, [r7, #16]
 8007cfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d0c:	f107 0314 	add.w	r3, r7, #20
 8007d10:	4619      	mov	r1, r3
 8007d12:	481b      	ldr	r0, [pc, #108]	; (8007d80 <HAL_HCD_MspInit+0xc0>)
 8007d14:	f7f9 ffbe 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d26:	2300      	movs	r3, #0
 8007d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d2a:	230a      	movs	r3, #10
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d2e:	f107 0314 	add.w	r3, r7, #20
 8007d32:	4619      	mov	r1, r3
 8007d34:	4812      	ldr	r0, [pc, #72]	; (8007d80 <HAL_HCD_MspInit+0xc0>)
 8007d36:	f7f9 ffad 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d3a:	4b10      	ldr	r3, [pc, #64]	; (8007d7c <HAL_HCD_MspInit+0xbc>)
 8007d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3e:	4a0f      	ldr	r2, [pc, #60]	; (8007d7c <HAL_HCD_MspInit+0xbc>)
 8007d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d44:	6353      	str	r3, [r2, #52]	; 0x34
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <HAL_HCD_MspInit+0xbc>)
 8007d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4e:	4a0b      	ldr	r2, [pc, #44]	; (8007d7c <HAL_HCD_MspInit+0xbc>)
 8007d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d54:	6453      	str	r3, [r2, #68]	; 0x44
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <HAL_HCD_MspInit+0xbc>)
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	2043      	movs	r0, #67	; 0x43
 8007d68:	f7f9 fe67 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d6c:	2043      	movs	r0, #67	; 0x43
 8007d6e:	f7f9 fe80 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d72:	bf00      	nop
 8007d74:	3728      	adds	r7, #40	; 0x28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	40020000 	.word	0x40020000

08007d84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff f8d9 	bl	8006f4a <USBH_LL_IncTimer>
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff f911 	bl	8006fd6 <USBH_LL_Connect>
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff f91a 	bl	8007004 <USBH_LL_Disconnect>
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70fb      	strb	r3, [r7, #3]
 8007de4:	4613      	mov	r3, r2
 8007de6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff f8cb 	bl	8006f9e <USBH_LL_PortEnabled>
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff f8cb 	bl	8006fba <USBH_LL_PortDisabled>
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d12a      	bne.n	8007e94 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007e3e:	4a18      	ldr	r2, [pc, #96]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e4a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e4e:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007e56:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e58:	2208      	movs	r2, #8
 8007e5a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007e5c:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e62:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007e68:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007e74:	480a      	ldr	r0, [pc, #40]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e76:	f7fa f8d8 	bl	800202a <HAL_HCD_Init>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007e80:	f7f8 fdfc 	bl	8000a7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007e84:	4806      	ldr	r0, [pc, #24]	; (8007ea0 <USBH_LL_Init+0x74>)
 8007e86:	f7fa fcdb 	bl	8002840 <HAL_HCD_GetCurrentFrame>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff f84c 	bl	8006f2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000564 	.word	0x20000564

08007ea4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fa fc48 	bl	8002750 <HAL_HCD_Start>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f95c 	bl	8008184 <USBH_Get_USB_Status>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fa fc50 	bl	8002796 <HAL_HCD_Stop>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 f941 	bl	8008184 <USBH_Get_USB_Status>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fa fc9a 	bl	800285c <HAL_HCD_GetCurrentSpeed>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d007      	beq.n	8007f3e <USBH_LL_GetSpeed+0x2e>
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d302      	bcc.n	8007f38 <USBH_LL_GetSpeed+0x28>
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d006      	beq.n	8007f44 <USBH_LL_GetSpeed+0x34>
 8007f36:	e008      	b.n	8007f4a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f3c:	e008      	b.n	8007f50 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	73fb      	strb	r3, [r7, #15]
    break;
 8007f42:	e005      	b.n	8007f50 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007f44:	2302      	movs	r3, #2
 8007f46:	73fb      	strb	r3, [r7, #15]
    break;
 8007f48:	e002      	b.n	8007f50 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f4e:	bf00      	nop
  }
  return  speed;
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fa fc2d 	bl	80027d0 <HAL_HCD_ResetPort>
 8007f76:	4603      	mov	r3, r0
 8007f78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f901 	bl	8008184 <USBH_Get_USB_Status>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fa fc35 	bl	8002816 <HAL_HCD_HC_GetXferCount>
 8007fac:	4603      	mov	r3, r0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fb6:	b590      	push	{r4, r7, lr}
 8007fb8:	b089      	sub	sp, #36	; 0x24
 8007fba:	af04      	add	r7, sp, #16
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	4608      	mov	r0, r1
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	70fb      	strb	r3, [r7, #3]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70bb      	strb	r3, [r7, #2]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007fde:	787c      	ldrb	r4, [r7, #1]
 8007fe0:	78ba      	ldrb	r2, [r7, #2]
 8007fe2:	78f9      	ldrb	r1, [r7, #3]
 8007fe4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fe6:	9302      	str	r3, [sp, #8]
 8007fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	4623      	mov	r3, r4
 8007ff6:	f7fa f87a 	bl	80020ee <HAL_HCD_HC_Init>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 f8bf 	bl	8008184 <USBH_Get_USB_Status>
 8008006:	4603      	mov	r3, r0
 8008008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800a:	7bbb      	ldrb	r3, [r7, #14]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	bd90      	pop	{r4, r7, pc}

08008014 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	4611      	mov	r1, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f7fa f8f3 	bl	800221e <HAL_HCD_HC_Halt>
 8008038:	4603      	mov	r3, r0
 800803a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f8a0 	bl	8008184 <USBH_Get_USB_Status>
 8008044:	4603      	mov	r3, r0
 8008046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008048:	7bbb      	ldrb	r3, [r7, #14]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008052:	b590      	push	{r4, r7, lr}
 8008054:	b089      	sub	sp, #36	; 0x24
 8008056:	af04      	add	r7, sp, #16
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	4608      	mov	r0, r1
 800805c:	4611      	mov	r1, r2
 800805e:	461a      	mov	r2, r3
 8008060:	4603      	mov	r3, r0
 8008062:	70fb      	strb	r3, [r7, #3]
 8008064:	460b      	mov	r3, r1
 8008066:	70bb      	strb	r3, [r7, #2]
 8008068:	4613      	mov	r3, r2
 800806a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800807a:	787c      	ldrb	r4, [r7, #1]
 800807c:	78ba      	ldrb	r2, [r7, #2]
 800807e:	78f9      	ldrb	r1, [r7, #3]
 8008080:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008084:	9303      	str	r3, [sp, #12]
 8008086:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008088:	9302      	str	r3, [sp, #8]
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	4623      	mov	r3, r4
 8008096:	f7fa f8e5 	bl	8002264 <HAL_HCD_HC_SubmitRequest>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f86f 	bl	8008184 <USBH_Get_USB_Status>
 80080a6:	4603      	mov	r3, r0
 80080a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd90      	pop	{r4, r7, pc}

080080b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080c6:	78fa      	ldrb	r2, [r7, #3]
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fa fb8e 	bl	80027ec <HAL_HCD_HC_GetURBState>
 80080d0:	4603      	mov	r3, r0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d103      	bne.n	80080f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 f872 	bl	80081dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80080f8:	20c8      	movs	r0, #200	; 0xc8
 80080fa:	f7f8 ff03 	bl	8000f04 <HAL_Delay>
  return USBH_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	70fb      	strb	r3, [r7, #3]
 8008114:	4613      	mov	r3, r2
 8008116:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800811e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008120:	78fa      	ldrb	r2, [r7, #3]
 8008122:	68f9      	ldr	r1, [r7, #12]
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	440b      	add	r3, r1
 800812e:	333b      	adds	r3, #59	; 0x3b
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008136:	78fa      	ldrb	r2, [r7, #3]
 8008138:	68f9      	ldr	r1, [r7, #12]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	440b      	add	r3, r1
 8008144:	3350      	adds	r3, #80	; 0x50
 8008146:	78ba      	ldrb	r2, [r7, #2]
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e009      	b.n	8008160 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800814c:	78fa      	ldrb	r2, [r7, #3]
 800814e:	68f9      	ldr	r1, [r7, #12]
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	440b      	add	r3, r1
 800815a:	3351      	adds	r3, #81	; 0x51
 800815c:	78ba      	ldrb	r2, [r7, #2]
 800815e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7f8 fec4 	bl	8000f04 <HAL_Delay>
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	2b03      	cmp	r3, #3
 8008196:	d817      	bhi.n	80081c8 <USBH_Get_USB_Status+0x44>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <USBH_Get_USB_Status+0x1c>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081b1 	.word	0x080081b1
 80081a4:	080081b7 	.word	0x080081b7
 80081a8:	080081bd 	.word	0x080081bd
 80081ac:	080081c3 	.word	0x080081c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
    break;
 80081b4:	e00b      	b.n	80081ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80081b6:	2302      	movs	r3, #2
 80081b8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ba:	e008      	b.n	80081ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80081bc:	2301      	movs	r3, #1
 80081be:	73fb      	strb	r3, [r7, #15]
    break;
 80081c0:	e005      	b.n	80081ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80081c2:	2302      	movs	r3, #2
 80081c4:	73fb      	strb	r3, [r7, #15]
    break;
 80081c6:	e002      	b.n	80081ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80081c8:	2302      	movs	r3, #2
 80081ca:	73fb      	strb	r3, [r7, #15]
    break;
 80081cc:	bf00      	nop
  }
  return usb_status;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80081f0:	2301      	movs	r3, #1
 80081f2:	73fb      	strb	r3, [r7, #15]
 80081f4:	e001      	b.n	80081fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	461a      	mov	r2, r3
 80081fe:	2101      	movs	r1, #1
 8008200:	4803      	ldr	r0, [pc, #12]	; (8008210 <MX_DriverVbusFS+0x34>)
 8008202:	f7f9 fef9 	bl	8001ff8 <HAL_GPIO_WritePin>
}
 8008206:	bf00      	nop
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	40020800 	.word	0x40020800

08008214 <__errno>:
 8008214:	4b01      	ldr	r3, [pc, #4]	; (800821c <__errno+0x8>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	2000002c 	.word	0x2000002c

08008220 <__libc_init_array>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	4e0d      	ldr	r6, [pc, #52]	; (8008258 <__libc_init_array+0x38>)
 8008224:	4c0d      	ldr	r4, [pc, #52]	; (800825c <__libc_init_array+0x3c>)
 8008226:	1ba4      	subs	r4, r4, r6
 8008228:	10a4      	asrs	r4, r4, #2
 800822a:	2500      	movs	r5, #0
 800822c:	42a5      	cmp	r5, r4
 800822e:	d109      	bne.n	8008244 <__libc_init_array+0x24>
 8008230:	4e0b      	ldr	r6, [pc, #44]	; (8008260 <__libc_init_array+0x40>)
 8008232:	4c0c      	ldr	r4, [pc, #48]	; (8008264 <__libc_init_array+0x44>)
 8008234:	f000 f8ea 	bl	800840c <_init>
 8008238:	1ba4      	subs	r4, r4, r6
 800823a:	10a4      	asrs	r4, r4, #2
 800823c:	2500      	movs	r5, #0
 800823e:	42a5      	cmp	r5, r4
 8008240:	d105      	bne.n	800824e <__libc_init_array+0x2e>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008248:	4798      	blx	r3
 800824a:	3501      	adds	r5, #1
 800824c:	e7ee      	b.n	800822c <__libc_init_array+0xc>
 800824e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008252:	4798      	blx	r3
 8008254:	3501      	adds	r5, #1
 8008256:	e7f2      	b.n	800823e <__libc_init_array+0x1e>
 8008258:	08008448 	.word	0x08008448
 800825c:	08008448 	.word	0x08008448
 8008260:	08008448 	.word	0x08008448
 8008264:	0800844c 	.word	0x0800844c

08008268 <malloc>:
 8008268:	4b02      	ldr	r3, [pc, #8]	; (8008274 <malloc+0xc>)
 800826a:	4601      	mov	r1, r0
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	f000 b861 	b.w	8008334 <_malloc_r>
 8008272:	bf00      	nop
 8008274:	2000002c 	.word	0x2000002c

08008278 <free>:
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <free+0xc>)
 800827a:	4601      	mov	r1, r0
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f000 b80b 	b.w	8008298 <_free_r>
 8008282:	bf00      	nop
 8008284:	2000002c 	.word	0x2000002c

08008288 <memset>:
 8008288:	4402      	add	r2, r0
 800828a:	4603      	mov	r3, r0
 800828c:	4293      	cmp	r3, r2
 800828e:	d100      	bne.n	8008292 <memset+0xa>
 8008290:	4770      	bx	lr
 8008292:	f803 1b01 	strb.w	r1, [r3], #1
 8008296:	e7f9      	b.n	800828c <memset+0x4>

08008298 <_free_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4605      	mov	r5, r0
 800829c:	2900      	cmp	r1, #0
 800829e:	d045      	beq.n	800832c <_free_r+0x94>
 80082a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a4:	1f0c      	subs	r4, r1, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfb8      	it	lt
 80082aa:	18e4      	addlt	r4, r4, r3
 80082ac:	f000 f8ac 	bl	8008408 <__malloc_lock>
 80082b0:	4a1f      	ldr	r2, [pc, #124]	; (8008330 <_free_r+0x98>)
 80082b2:	6813      	ldr	r3, [r2, #0]
 80082b4:	4610      	mov	r0, r2
 80082b6:	b933      	cbnz	r3, 80082c6 <_free_r+0x2e>
 80082b8:	6063      	str	r3, [r4, #4]
 80082ba:	6014      	str	r4, [r2, #0]
 80082bc:	4628      	mov	r0, r5
 80082be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c2:	f000 b8a2 	b.w	800840a <__malloc_unlock>
 80082c6:	42a3      	cmp	r3, r4
 80082c8:	d90c      	bls.n	80082e4 <_free_r+0x4c>
 80082ca:	6821      	ldr	r1, [r4, #0]
 80082cc:	1862      	adds	r2, r4, r1
 80082ce:	4293      	cmp	r3, r2
 80082d0:	bf04      	itt	eq
 80082d2:	681a      	ldreq	r2, [r3, #0]
 80082d4:	685b      	ldreq	r3, [r3, #4]
 80082d6:	6063      	str	r3, [r4, #4]
 80082d8:	bf04      	itt	eq
 80082da:	1852      	addeq	r2, r2, r1
 80082dc:	6022      	streq	r2, [r4, #0]
 80082de:	6004      	str	r4, [r0, #0]
 80082e0:	e7ec      	b.n	80082bc <_free_r+0x24>
 80082e2:	4613      	mov	r3, r2
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	b10a      	cbz	r2, 80082ec <_free_r+0x54>
 80082e8:	42a2      	cmp	r2, r4
 80082ea:	d9fa      	bls.n	80082e2 <_free_r+0x4a>
 80082ec:	6819      	ldr	r1, [r3, #0]
 80082ee:	1858      	adds	r0, r3, r1
 80082f0:	42a0      	cmp	r0, r4
 80082f2:	d10b      	bne.n	800830c <_free_r+0x74>
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	4401      	add	r1, r0
 80082f8:	1858      	adds	r0, r3, r1
 80082fa:	4282      	cmp	r2, r0
 80082fc:	6019      	str	r1, [r3, #0]
 80082fe:	d1dd      	bne.n	80082bc <_free_r+0x24>
 8008300:	6810      	ldr	r0, [r2, #0]
 8008302:	6852      	ldr	r2, [r2, #4]
 8008304:	605a      	str	r2, [r3, #4]
 8008306:	4401      	add	r1, r0
 8008308:	6019      	str	r1, [r3, #0]
 800830a:	e7d7      	b.n	80082bc <_free_r+0x24>
 800830c:	d902      	bls.n	8008314 <_free_r+0x7c>
 800830e:	230c      	movs	r3, #12
 8008310:	602b      	str	r3, [r5, #0]
 8008312:	e7d3      	b.n	80082bc <_free_r+0x24>
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	1821      	adds	r1, r4, r0
 8008318:	428a      	cmp	r2, r1
 800831a:	bf04      	itt	eq
 800831c:	6811      	ldreq	r1, [r2, #0]
 800831e:	6852      	ldreq	r2, [r2, #4]
 8008320:	6062      	str	r2, [r4, #4]
 8008322:	bf04      	itt	eq
 8008324:	1809      	addeq	r1, r1, r0
 8008326:	6021      	streq	r1, [r4, #0]
 8008328:	605c      	str	r4, [r3, #4]
 800832a:	e7c7      	b.n	80082bc <_free_r+0x24>
 800832c:	bd38      	pop	{r3, r4, r5, pc}
 800832e:	bf00      	nop
 8008330:	200000c0 	.word	0x200000c0

08008334 <_malloc_r>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	1ccd      	adds	r5, r1, #3
 8008338:	f025 0503 	bic.w	r5, r5, #3
 800833c:	3508      	adds	r5, #8
 800833e:	2d0c      	cmp	r5, #12
 8008340:	bf38      	it	cc
 8008342:	250c      	movcc	r5, #12
 8008344:	2d00      	cmp	r5, #0
 8008346:	4606      	mov	r6, r0
 8008348:	db01      	blt.n	800834e <_malloc_r+0x1a>
 800834a:	42a9      	cmp	r1, r5
 800834c:	d903      	bls.n	8008356 <_malloc_r+0x22>
 800834e:	230c      	movs	r3, #12
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	2000      	movs	r0, #0
 8008354:	bd70      	pop	{r4, r5, r6, pc}
 8008356:	f000 f857 	bl	8008408 <__malloc_lock>
 800835a:	4a21      	ldr	r2, [pc, #132]	; (80083e0 <_malloc_r+0xac>)
 800835c:	6814      	ldr	r4, [r2, #0]
 800835e:	4621      	mov	r1, r4
 8008360:	b991      	cbnz	r1, 8008388 <_malloc_r+0x54>
 8008362:	4c20      	ldr	r4, [pc, #128]	; (80083e4 <_malloc_r+0xb0>)
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	b91b      	cbnz	r3, 8008370 <_malloc_r+0x3c>
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f83d 	bl	80083e8 <_sbrk_r>
 800836e:	6020      	str	r0, [r4, #0]
 8008370:	4629      	mov	r1, r5
 8008372:	4630      	mov	r0, r6
 8008374:	f000 f838 	bl	80083e8 <_sbrk_r>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d124      	bne.n	80083c6 <_malloc_r+0x92>
 800837c:	230c      	movs	r3, #12
 800837e:	6033      	str	r3, [r6, #0]
 8008380:	4630      	mov	r0, r6
 8008382:	f000 f842 	bl	800840a <__malloc_unlock>
 8008386:	e7e4      	b.n	8008352 <_malloc_r+0x1e>
 8008388:	680b      	ldr	r3, [r1, #0]
 800838a:	1b5b      	subs	r3, r3, r5
 800838c:	d418      	bmi.n	80083c0 <_malloc_r+0x8c>
 800838e:	2b0b      	cmp	r3, #11
 8008390:	d90f      	bls.n	80083b2 <_malloc_r+0x7e>
 8008392:	600b      	str	r3, [r1, #0]
 8008394:	50cd      	str	r5, [r1, r3]
 8008396:	18cc      	adds	r4, r1, r3
 8008398:	4630      	mov	r0, r6
 800839a:	f000 f836 	bl	800840a <__malloc_unlock>
 800839e:	f104 000b 	add.w	r0, r4, #11
 80083a2:	1d23      	adds	r3, r4, #4
 80083a4:	f020 0007 	bic.w	r0, r0, #7
 80083a8:	1ac3      	subs	r3, r0, r3
 80083aa:	d0d3      	beq.n	8008354 <_malloc_r+0x20>
 80083ac:	425a      	negs	r2, r3
 80083ae:	50e2      	str	r2, [r4, r3]
 80083b0:	e7d0      	b.n	8008354 <_malloc_r+0x20>
 80083b2:	428c      	cmp	r4, r1
 80083b4:	684b      	ldr	r3, [r1, #4]
 80083b6:	bf16      	itet	ne
 80083b8:	6063      	strne	r3, [r4, #4]
 80083ba:	6013      	streq	r3, [r2, #0]
 80083bc:	460c      	movne	r4, r1
 80083be:	e7eb      	b.n	8008398 <_malloc_r+0x64>
 80083c0:	460c      	mov	r4, r1
 80083c2:	6849      	ldr	r1, [r1, #4]
 80083c4:	e7cc      	b.n	8008360 <_malloc_r+0x2c>
 80083c6:	1cc4      	adds	r4, r0, #3
 80083c8:	f024 0403 	bic.w	r4, r4, #3
 80083cc:	42a0      	cmp	r0, r4
 80083ce:	d005      	beq.n	80083dc <_malloc_r+0xa8>
 80083d0:	1a21      	subs	r1, r4, r0
 80083d2:	4630      	mov	r0, r6
 80083d4:	f000 f808 	bl	80083e8 <_sbrk_r>
 80083d8:	3001      	adds	r0, #1
 80083da:	d0cf      	beq.n	800837c <_malloc_r+0x48>
 80083dc:	6025      	str	r5, [r4, #0]
 80083de:	e7db      	b.n	8008398 <_malloc_r+0x64>
 80083e0:	200000c0 	.word	0x200000c0
 80083e4:	200000c4 	.word	0x200000c4

080083e8 <_sbrk_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4c06      	ldr	r4, [pc, #24]	; (8008404 <_sbrk_r+0x1c>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4605      	mov	r5, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	f7f8 fc9e 	bl	8000d34 <_sbrk>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d102      	bne.n	8008402 <_sbrk_r+0x1a>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	b103      	cbz	r3, 8008402 <_sbrk_r+0x1a>
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	20000828 	.word	0x20000828

08008408 <__malloc_lock>:
 8008408:	4770      	bx	lr

0800840a <__malloc_unlock>:
 800840a:	4770      	bx	lr

0800840c <_init>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr

08008418 <_fini>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr
